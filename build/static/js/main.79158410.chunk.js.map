{"version":3,"sources":["components/Template/Template.js","components/Letters/Letters.js","components/App/App.js","index.js"],"names":["keys","Template","props","renderTemplateById","type","wordsArr","map","word","index","key","templateNumber","wordIndex","guessed","this","words","data","template","className","React","Component","Word","arr","wordClass","stretch","style","zIndex","templateNum","templateChange","res","e","toUpperCase","Letters","state","input","selectedLetter","touchedLine","obj","setSelectedLetter","id","setState","newArr","el","push","Number","setInput","letter","canRender","forEach","element","lettersData","setLettersData","setLettersDataByMouse","event","target","innerText","wordChecker","console","log","renderTouchLine","x","y","left","top","spanList","window","onload","document","getElementById","inputRender","getElemCoordTouch","child","length","value","xStart","Math","floor","getBoundingClientRect","xEnd","width","yStart","yEnd","height","touchSelector","preventDefault","childs","children","elementX","changedTouches","clientX","elementY","clientY","i","removeSelector","removeEventListener","addEventListener","letters","isSelectedLetter","selectedId","letterClass","inputLabel","App","dataBase","level","currentLevel","levelData","WordsTemplate","ReactDOM","render","StrictMode"],"mappings":"mSAGIA,G,MAAO,GAEUC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,mBAAqB,SAACC,EAAMC,GAE7B,OAAOA,EAASC,KAAI,SAACC,EAAMC,GACvB,OAAO,kBAAC,EAAD,CACHD,KAAMA,EAAKA,KACXE,IAAKF,EAAKA,KACVG,eAAgBN,EAChBO,UAAWH,EACXI,QAASL,EAAKK,cAVX,E,qDAeT,IAAD,EACiDC,KAAKX,MAA3CY,EADX,EACGC,KAAQD,MAAiBJ,EAD5B,EACoBK,KAAQL,eAC3BM,EAAWH,KAAKV,mBAAmBO,EAAgBI,GACzD,OAAO,yBAAKG,UAAU,YACjBD,O,GApByBE,IAAMC,WAyBtCC,EAAO,SAAC,GAAkD,IAAhDb,EAA+C,EAA/CA,KAAMG,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QACvCS,EAAG,YAAOd,GACZe,EAAY,iBACZV,IAASU,GAAa,4BAC1B,IAAIC,GAAU,EAyBd,IAAMC,EAAQ,CACVC,OAxDK,IAgCT,SAAwBC,GAEpB,GAAoB,IAAhBA,EAAmB,CACnB,OAAQf,GACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAGY,GAAU,EAEtBD,GAAa,cAIjB,OADIC,IAASD,GAAa,4BAClBX,GACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAAGY,EAAUD,GAAS,iBAAcX,IAOjDgB,CAAejB,GACf,IAAMkB,EAAMP,EAAIf,KAAI,SAACuB,GACjB,OAAO,yBAAKZ,UAAU,mBAAmBR,IAAKT,KAAS6B,EAAEC,kBAE7D,OAAO,yBAAKb,UAAWK,EAAWE,MAAOA,GACpCI,IChEYG,G,wDACjB,aAAe,IAAD,uBACV,gBACKC,MAAQ,CACTC,MAAO,GACPC,eAAgB,GAChBC,YAAa,IAEjB,IAAIC,EAAM,GAPA,OAQV,EAAKC,kBAAoB,SAACC,GACtB,EAAKC,UAAS,YAAyB,IAC7BC,EAD4B,EAArBN,eACiB5B,KAAI,SAAAmC,GAAE,OAAIA,KAExC,OADAD,EAAOE,KAAKC,OAAOL,IACZ,CAAEJ,eAAgBM,OAGjC,EAAKI,SAAW,SAACC,EAAQP,GACrB,IAAIQ,GAAY,EAChB,EAAKd,MAAMC,MAAMc,SAAQ,SAAAC,GACjBA,EAAQV,KAAOA,IACfQ,GAAY,MAEhBA,GAAW,EAAKP,UAAS,YAAgB,IACrCU,EADoC,EAAZhB,MACJ3B,KAAI,SAAAuB,GAAC,OAAIA,KAOjC,OANAoB,EAAYP,KACR,CACIG,OAAQA,EACRP,GAAIA,IAGL,CAAEL,MAAOgB,OAGxB,EAAKC,eAAiB,SAACL,EAAQP,GAC3B,EAAKM,SAASC,EAAQP,GACtB,EAAKD,kBAAkBC,IAE3B,EAAKa,sBAAwB,SAACC,GAAW,IAAD,EACVA,EAAMC,OAAxBC,EAD4B,EAC5BA,UAAWhB,EADiB,EACjBA,GACnB,EAAKY,eAAeI,EAAWhB,IAEnC,EAAKiB,YAAc,WACfC,QAAQC,IAAI,+BAEhB,EAAKC,gBAAkB,SAACC,EAAGC,GACvB,EAAKrB,UAAS,YAAsB,IAAnBJ,EAAkB,EAAlBA,YACPX,EAAQ,CACVqC,KAAMF,EAAI,GACVG,IAAKF,GAEHG,EAAW5B,EAAY7B,KAAI,SAAAmC,GAAE,OAAIA,KAKvC,OAJAsB,EAASrB,KAAK,0BACVzB,UAAU,OACVO,MAAOA,KAEJ,CAAEW,YAAa4B,OAG9BC,OAAOC,OAAS,WACZ,IAAMjB,EAAUkB,SAASC,eAAe,iBAElCC,EAAc,SAAChB,GACjB,EAAKD,sBAAsBC,IAEzBiB,EAAoB,SAACC,GACnBlC,EAAImC,OAAS,GAAGnC,EAAIM,KAAK,CACzB8B,MAAOF,EAAMhB,UACbhB,GAAIgC,EAAMhC,GACVmC,OAAQC,KAAKC,MAAML,EAAMM,wBAAwBjB,GACjDkB,KAAMH,KAAKC,MAAML,EAAMM,wBAAwBjB,EAAIW,EAAMM,wBAAwBE,OACjFC,OAAQL,KAAKC,MAAML,EAAMM,wBAAwBhB,GACjDoB,KAAMN,KAAKC,MAAML,EAAMM,wBAAwBhB,EAAIU,EAAMM,wBAAwBK,WAGnFC,EAAgB,SAAC9B,GACnBA,EAAM+B,iBACN,IAAMC,EAASpC,EAAQqC,SACnBC,EAAWlC,EAAMmC,eAAe,GAAGC,QACnCC,EAAWrC,EAAMmC,eAAe,GAAGG,QACvC,EAAKhC,gBAAgB4B,EAAUG,GAC/BrD,EAAI9B,KAAI,SAAAmC,GAAO,IACHsC,EAA0CtC,EAA1CsC,OAAQC,EAAkCvC,EAAlCuC,KAAMP,EAA4BhC,EAA5BgC,OAAQI,EAAoBpC,EAApBoC,KAAML,EAAc/B,EAAd+B,MAAOlC,EAAOG,EAAPH,GACvCmD,EAAWV,GACXU,EAAWT,GACXM,EAAWb,GACXa,EAAWT,GACX,EAAK3B,eAAesB,EAAOlC,MAEnC,IAAK,IAAWgC,EAAPqB,EAAI,EAAUrB,EAAQc,EAAOO,GAAIA,IACtCtB,EAAkBC,IAYpBsB,EAAiB,WACnB,EAAKrC,cACL,EAAKhB,SAAS,CACVN,MAAO,GACPC,eAAgB,GAChBC,YAAa,KAGjB,IADA,IACgBmC,EADVc,EAASpC,EAAQqC,SACdM,EAAI,EAAUrB,EAAQc,EAAOO,GAAIA,IACtCrB,EAAMuB,oBAAoB,YAAazB,IAG/CpB,EAAQ8C,iBAAiB,aApBL,SAAC1C,GACjB,IAAMgC,EAASpC,EAAQqC,SAEH,IADPjC,EAAMC,OAAOC,UACjBiB,QAAc,EAAKpB,sBAAsBC,GAClD,IAAK,IAAWkB,EAAPqB,EAAI,EAAUrB,EAAQc,EAAOO,GAAIA,IACtCrB,EAAMwB,iBAAiB,YAAa1B,MAgB5CF,SAAS4B,iBAAiB,UAAWF,GAErC5C,EAAQ8C,iBAAiB,YAAaZ,GACtClC,EAAQ8C,iBAAiB,aAAcZ,GACvChB,SAAS4B,iBAAiB,WAAYF,IArHhC,E,qDAwHJ,IAAD,EAC6B/E,KAAKmB,MAA/BC,EADH,EACGA,MAAOC,EADV,EACUA,eACT6D,EAAUlF,KAAKX,MAAM6F,QAAQzF,KAAI,SAACmC,EAAIjC,GAAW,IAC3CqC,EAAeJ,EAAfI,OAAQP,EAAOG,EAAPH,GACZ0D,GAAmB,EACvB9D,EAAea,SAAQ,SAAAkD,GACf3D,IAAO2D,IAAYD,GAAmB,MAE9C,IAAME,EAAcF,EAAgB,+DACwBxF,GADxB,uCAEAA,GACpC,OAAO,0BACH8B,GAAIA,EACJ7B,IAAK6B,EACLrB,UAAWiF,GACVrD,MAGHsD,EAAalE,EAAM3B,KAAI,SAAAuB,GAAC,OAAIA,EAAEgB,UACpC,OAAO,yBAAK5B,UAAU,gBAAgBqB,GAAG,QACpCzB,KAAKmB,MAAMG,YACZ,yBAAKlB,UAAU,iBAAiBkF,GAChC,yBAAKlF,UAAU,UAAUqB,GAAG,iBACvByD,Q,GAhJoB7E,IAAMC,YCEtBiF,E,kDACjB,aAAe,IAAD,8BACV,gBACKpE,MAAQ,CACTqE,SAAU,CACN,CACIC,MAAO,EACP5F,eAAgB,EAChBI,MAAO,CACH,CAAEP,KAAM,iCAASK,SAAS,GAC1B,CAAEL,KAAM,iCAASK,SAAS,GAC1B,CAAEL,KAAM,2BAAQK,SAAS,GACzB,CAAEL,KAAM,2BAAQK,SAAS,GACzB,CAAEL,KAAM,2BAAQK,SAAS,GACzB,CAAEL,KAAM,iCAASK,SAAS,IAE9BmF,QAAS,CACL,CAAElD,OAAQ,SAAKP,GAAI,GACnB,CAAEO,OAAQ,SAAKP,GAAI,GACnB,CAAEO,OAAQ,SAAKP,GAAI,GACnB,CAAEO,OAAQ,SAAKP,GAAI,GACnB,CAAEO,OAAQ,SAAKP,GAAI,MAG/BiE,aAAc,GAvBR,E,qDA4BJ,IAAD,EAC8B1F,KAAKmB,MAAhCqE,EADH,EACGA,SAAUE,EADb,EACaA,aACZC,EAAYH,EAAS/F,KAAI,SAAAmC,GAAO,IAC1B6D,EAA0C7D,EAA1C6D,MAAO5F,EAAmC+B,EAAnC/B,eAAgBI,EAAmB2B,EAAnB3B,MAAOiF,EAAYtD,EAAZsD,QACtC,OAAIO,IAAUC,EAAqB,CAAE7F,iBAAgBI,QAAOiF,WAChD,QAERA,EAAYS,EAAU,GAAtBT,QACGU,EARN,iBAQwBD,EAAU,IACvC,OAAO,yBAAKvF,UAAU,WAClB,kBAAC,EAAD,CAAUF,KAAM0F,IAChB,kBAAC,EAAD,CAASV,QAASA,S,GAxCG7E,IAAMC,WCDvCuF,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAASC,eAAe,W","file":"static/js/main.79158410.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Template.scss'\r\n\r\nlet keys = 0;\r\nlet zIndex = 0;\r\nexport default class Template extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.renderTemplateById = (type, wordsArr) => {\r\n            // template #1\r\n            return wordsArr.map((word, index) => {\r\n                return <Word\r\n                    word={word.word}\r\n                    key={word.word}\r\n                    templateNumber={type}\r\n                    wordIndex={index}\r\n                    guessed={word.guessed}\r\n                />\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const { data: { words }, data: { templateNumber } } = this.props\r\n        const template = this.renderTemplateById(templateNumber, words)\r\n        return <div className=\"template\">\r\n            {template}\r\n        </div>\r\n    }\r\n}\r\n\r\nconst Word = ({ word, templateNumber, wordIndex, guessed }) => {\r\n    const arr = [...word]\r\n    let wordClass = \"template__word\"\r\n    if (guessed) wordClass += \" template__word--visible\"\r\n    let stretch = false\r\n\r\n    function templateChange(templateNum) {\r\n        // template #1\r\n        if (templateNum === 1) {\r\n            switch (wordIndex) {\r\n                case 2: stretch = true; break;\r\n                case 4: stretch = true; break;\r\n                case 5: stretch = true; break;\r\n                case 3: stretch = true; break;\r\n            }\r\n            wordClass += \" template_1\"\r\n        }\r\n        // \r\n        if (stretch) wordClass += \" template__word--stretch\"\r\n        switch (wordIndex) {\r\n            case 0: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 1: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 2: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 3: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 4: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 5: stretch = wordClass += ` index_${wordIndex}`; break;\r\n        }\r\n    }\r\n    // zet index\r\n    const style = {\r\n        zIndex: zIndex,\r\n    }\r\n    templateChange(templateNumber)\r\n    const res = arr.map((e) => {\r\n        return <div className=\"template__letter\" key={keys++}>{e.toUpperCase()}</div>\r\n    })\r\n    return <div className={wordClass} style={style} >\r\n        {res}\r\n    </div>\r\n}","import React from 'react'\r\nimport './Letters.scss'\r\n\r\nexport default class Letters extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            input: [],\r\n            selectedLetter: [],\r\n            touchedLine: []\r\n        }\r\n        let obj = []\r\n        this.setSelectedLetter = (id) => {\r\n            this.setState(({ selectedLetter }) => {\r\n                const newArr = selectedLetter.map(el => el)\r\n                newArr.push(Number(id))\r\n                return { selectedLetter: newArr }\r\n            })\r\n        }\r\n        this.setInput = (letter, id) => {\r\n            let canRender = true;\r\n            this.state.input.forEach(element => {\r\n                if (element.id === id)\r\n                    canRender = false\r\n            });\r\n            if (canRender) this.setState(({ input }) => {\r\n                let lettersData = input.map(e => e)\r\n                lettersData.push(\r\n                    {\r\n                        letter: letter,\r\n                        id: id\r\n                    }\r\n                )\r\n                return { input: lettersData }\r\n            })\r\n        }\r\n        this.setLettersData = (letter, id) => {\r\n            this.setInput(letter, id)\r\n            this.setSelectedLetter(id)\r\n        }\r\n        this.setLettersDataByMouse = (event) => {\r\n            const { innerText, id } = event.target\r\n            this.setLettersData(innerText, id)\r\n        }\r\n        this.wordChecker = () => {\r\n            console.log(\"CHECKING WORD WITH DATA...\")\r\n        }\r\n        this.renderTouchLine = (x, y) => {\r\n            this.setState(({ touchedLine }) => {\r\n                const style = {\r\n                    left: x - 10,\r\n                    top: y,\r\n                }\r\n                const spanList = touchedLine.map(el => el)\r\n                spanList.push(<span\r\n                    className=\"test\"\r\n                    style={style}>\r\n                </span>)\r\n                return { touchedLine: spanList }\r\n            })\r\n        }\r\n        window.onload = () => {\r\n            const element = document.getElementById('letters-block')\r\n\r\n            const inputRender = (event) => {\r\n                this.setLettersDataByMouse(event)\r\n            }\r\n            const getElemCoordTouch = (child) => {\r\n                if (obj.length < 5) obj.push({\r\n                    value: child.innerText,\r\n                    id: child.id,\r\n                    xStart: Math.floor(child.getBoundingClientRect().x),\r\n                    xEnd: Math.floor(child.getBoundingClientRect().x + child.getBoundingClientRect().width),\r\n                    yStart: Math.floor(child.getBoundingClientRect().y),\r\n                    yEnd: Math.floor(child.getBoundingClientRect().y + child.getBoundingClientRect().height)\r\n                })\r\n            }\r\n            const touchSelector = (event) => {\r\n                event.preventDefault()\r\n                const childs = element.children\r\n                let elementX = event.changedTouches[0].clientX\r\n                let elementY = event.changedTouches[0].clientY\r\n                this.renderTouchLine(elementX, elementY)\r\n                obj.map(el => {\r\n                    const { yStart, yEnd, xStart, xEnd, value, id } = el\r\n                    if (elementY > yStart &&\r\n                        elementY < yEnd &&\r\n                        elementX > xStart &&\r\n                        elementX < xEnd)\r\n                        this.setLettersData(value, id)\r\n                })\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    getElemCoordTouch(child)\r\n\r\n                }\r\n            }\r\n            const addSelector = (event) => {\r\n                const childs = element.children\r\n                const text = event.target.innerText\r\n                if (text.length === 1) this.setLettersDataByMouse(event)\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    child.addEventListener('mouseover', inputRender)\r\n                }\r\n            }\r\n            const removeSelector = () => {\r\n                this.wordChecker()\r\n                this.setState({\r\n                    input: [],\r\n                    selectedLetter: [],\r\n                    touchedLine: []\r\n                })\r\n                const childs = element.children\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    child.removeEventListener('mouseover', inputRender)\r\n                }\r\n            }\r\n            element.addEventListener('mousedown', addSelector)\r\n            document.addEventListener('mouseup', removeSelector)\r\n\r\n            element.addEventListener('touchmove', touchSelector)\r\n            element.addEventListener('touchstart', touchSelector)\r\n            document.addEventListener('touchend', removeSelector)\r\n        }\r\n    }\r\n    render() {\r\n        const { input, selectedLetter } = this.state\r\n        const letters = this.props.letters.map((el, index) => {\r\n            const { letter, id } = el;\r\n            let isSelectedLetter = false;\r\n            selectedLetter.forEach(selectedId => {\r\n                if (id === selectedId) isSelectedLetter = true\r\n            });\r\n            const letterClass = isSelectedLetter ?\r\n                `letters__item letters__item--selected letters--index_${index}` :\r\n                `letters__item letters--index_${index}`\r\n            return <span\r\n                id={id}\r\n                key={id}\r\n                className={letterClass}>\r\n                {letter}\r\n            </span>\r\n        })\r\n        const inputLabel = input.map(e => e.letter)\r\n        return <div className=\"letters-block\" id=\"test\">\r\n            {this.state.touchedLine}\r\n            <div className=\"letters-input\">{inputLabel}</div>\r\n            <div className=\"letters\" id=\"letters-block\">\r\n                {letters}\r\n            </div >\r\n        </div>\r\n    }\r\n}","import React from 'react'\r\nimport './App.scss'\r\nimport Template from '../Template/Template'\r\nimport Letters from '../Letters/Letters'\r\n\r\nexport default class App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            dataBase: [\r\n                {\r\n                    level: 1,\r\n                    templateNumber: 1,\r\n                    words: [\r\n                        { word: 'Тарас', guessed: true, },\r\n                        { word: 'Траса', guessed: true },\r\n                        { word: 'Тара', guessed: true },\r\n                        { word: 'Сара', guessed: true },\r\n                        { word: 'Раса', guessed: true },\r\n                        { word: 'Раста', guessed: true }\r\n                    ],\r\n                    letters: [\r\n                        { letter: 'А', id: 1 },\r\n                        { letter: 'Р', id: 2 },\r\n                        { letter: 'С', id: 3 },\r\n                        { letter: 'А', id: 4 },\r\n                        { letter: 'Т', id: 5 },\r\n                    ]\r\n                }],\r\n            currentLevel: 1,\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { dataBase, currentLevel } = this.state\r\n        const levelData = dataBase.map(el => {\r\n            const { level, templateNumber, words, letters } = el\r\n            if (level === currentLevel) return { templateNumber, words, letters }\r\n            else return null\r\n        })\r\n        const { letters } = levelData[0]\r\n        const { ...WordsTemplate } = levelData[0]\r\n        return <div className=\"wrapper\">\r\n            <Template data={WordsTemplate} />\r\n            <Letters letters={letters} />\r\n        </div>\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}