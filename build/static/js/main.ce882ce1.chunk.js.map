{"version":3,"sources":["components/Template/Template.js","components/Letters/Letters.js","components/MiscWords/MiscWords.js","components/LevelPassedAlert/LevelPassedAlert.js","components/GamePassedScreen/GamePassedScreen.js","data/data.js","components/App/App.js","index.js"],"names":["keys","Template","props","guessedWords","renderTemplateById","type","wordsArr","map","word","index","isWordGuessed","guessedWordsChecker","key","templateNumber","wordIndex","guessed","stretch","addGuessedWord","push","includes","this","words","data","completed","templateClass","template","className","React","Component","Word","lettersArr","zIndex","letterClass","wordClass","style","templateChange","res","e","toUpperCase","Letters","state","input","selectedLetter","lettersCoord","setSelectedLetter","id","setState","newArr","el","Number","setInput","letter","canRender","forEach","element","lettersData","setLettersData","setLettersDataByMouse","event","target","innerText","wordChecker","document","getElementById","inputRender","getElemCoordTouch","child","length","newCoords","value","xStart","Math","floor","getBoundingClientRect","x","xEnd","width","yStart","y","yEnd","height","touchSelector","childs","children","elementX","changedTouches","clientX","elementY","clientY","preventDefault","i","removeSelector","nextLevelChecker","removeEventListener","addEventListener","onToggleModal","miscWords","letters","miscWordsCount","filter","lettersBlockClass","lettersElement","isSelectedLetter","selectedId","inputLabel","btnClass","onClick","MiscWords","isModalActive","modalClass","miscWordsArr","LevelPassedAlert","nextLevelNumber","level","nextLevelData","levelsAmmount","GamePassedScreen","onRestartGame","fxProps","count","interval","colors","calc","window","innerWidth","random","setTimeout","App","modalActive","currentLevel","dataBase","newGame","console","log","toggleModal","setCompletedLevel","completedLevelObj","currentLevelData","levelChecker","levelCompleted","nextLevel","enterWord","join","newData","elWord","levelData","WordsTemplate","ReactDOM","render"],"mappings":"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","file":"static/js/main.ce882ce1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Template.scss'\r\n\r\nlet keys = 0;\r\n\r\nexport default class Template extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const guessedWords = []\r\n        this.renderTemplateById = (type, wordsArr) => {\r\n            // template #1\r\n            return wordsArr.map((word, index) => {\r\n                return <Word\r\n                    isWordGuessed={this.guessedWordsChecker}\r\n                    word={word.word}\r\n                    key={word.word}\r\n                    templateNumber={type}\r\n                    wordIndex={index}\r\n                    guessed={word.guessed}\r\n                    stretch={word.stretch}\r\n                />\r\n            })\r\n        }\r\n        this.addGuessedWord = (word) => {\r\n            guessedWords.push(word)\r\n        }\r\n        this.guessedWordsChecker = (word) => {\r\n            if (guessedWords.includes(word)) return true\r\n            else { this.addGuessedWord(word); return false }\r\n\r\n        }\r\n    }\r\n    render() {\r\n        const { data: { words }, data: { templateNumber }, data: { completed } } = this.props\r\n        let templateClass = `template template_${templateNumber}`\r\n        if (completed) templateClass += ' animate__animated animate__flipOutY animate__delay-1s'\r\n        else templateClass += ' animate__animated animate__flipInY'\r\n        const template = this.renderTemplateById(templateNumber, words)\r\n        return <div className={templateClass}>\r\n            {template}\r\n        </div>\r\n    }\r\n}\r\n\r\nconst Word = ({ word, stretch, wordIndex, guessed, isWordGuessed }) => {\r\n    const lettersArr = [...word]\r\n    let zIndex = 0;\r\n    let letterClass = \"template__letter-inner\"\r\n    let wordClass = \"template__word\"\r\n    if (guessed) {\r\n        zIndex = 1\r\n        if (isWordGuessed(word)) {\r\n            letterClass += \" template__letter-inner--visible\"\r\n            zIndex++\r\n        }\r\n        else letterClass += \" template__letter-inner--visible animate__animated animate__fadeInUp\"\r\n    }\r\n    function templateChange(stretch) {\r\n        if (stretch) wordClass += \" template__word--stretch\"\r\n        switch (wordIndex) {\r\n            case 0: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 1: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 2: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 3: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 4: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 5: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 6: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 7: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 8: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            default: break\r\n        }\r\n    }\r\n    // zet index\r\n    const style = {\r\n        zIndex: zIndex,\r\n    }\r\n    templateChange(stretch)\r\n    const res = lettersArr.map((e) => {\r\n        return <div className=\"template__letter\" key={keys++}>\r\n            <span className={letterClass}>\r\n                {e.toUpperCase()}\r\n            </span>\r\n        </div>\r\n    })\r\n    return <div className={wordClass} style={style} >\r\n        {res}\r\n    </div>\r\n}\r\n","import React from 'react'\r\nimport './Letters.scss'\r\n\r\nexport default class Letters extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            input: [],\r\n            selectedLetter: [],\r\n            lettersCoord: [],\r\n        }\r\n\r\n        this.setSelectedLetter = (id) => {\r\n            this.setState(({ selectedLetter }) => {\r\n                const newArr = selectedLetter.map(el => el)\r\n                newArr.push(Number(id))\r\n                return { selectedLetter: newArr }\r\n            })\r\n        }\r\n        this.setInput = (letter, id) => {\r\n            let canRender = true;\r\n            this.state.input.forEach(element => {\r\n                if (element.id === id)\r\n                    canRender = false\r\n            });\r\n            if (canRender) this.setState(({ input }) => {\r\n                let lettersData = input.map(e => e)\r\n                lettersData.push(\r\n                    {\r\n                        letter: letter,\r\n                        id: id\r\n                    }\r\n                )\r\n                return { input: lettersData }\r\n            })\r\n        }\r\n        this.setLettersData = (letter, id) => {\r\n            this.setInput(letter, id)\r\n            this.setSelectedLetter(id)\r\n        }\r\n        this.setLettersDataByMouse = (event) => {\r\n            const { innerText, id } = event.target\r\n            this.setLettersData(innerText, id)\r\n        }\r\n        this.wordChecker = (element) => {\r\n            const { wordChecker } = this.props\r\n            wordChecker(element)\r\n        }\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n\r\n        const element = document.getElementById('letters-block')\r\n\r\n        const inputRender = (event) => {\r\n            this.setLettersDataByMouse(event)\r\n        }\r\n        const getElemCoordTouch = (child) => {\r\n            if (this.state.lettersCoord.length < 5) this.setState(({ lettersCoord }) => {\r\n                const newCoords = lettersCoord.map(e => e)\r\n                newCoords.push({\r\n                    value: child.innerText,\r\n                    id: child.id,\r\n                    xStart: Math.floor(child.getBoundingClientRect().x),\r\n                    xEnd: Math.floor(child.getBoundingClientRect().x + child.getBoundingClientRect().width),\r\n                    yStart: Math.floor(child.getBoundingClientRect().y),\r\n                    yEnd: Math.floor(child.getBoundingClientRect().y + child.getBoundingClientRect().height)\r\n                })\r\n                return { lettersCoord: newCoords }\r\n            })\r\n            else this.setState({ lettersCoord: [] })\r\n        }\r\n        const touchSelector = (event) => {\r\n            const childs = element.children\r\n            let elementX = event.changedTouches[0].clientX\r\n            let elementY = event.changedTouches[0].clientY\r\n            event.preventDefault()\r\n            this.state.lettersCoord.forEach(el => {\r\n                const { yStart, yEnd, xStart, xEnd, value, id } = el\r\n                if (elementY > yStart &&\r\n                    elementY < yEnd &&\r\n                    elementX > xStart &&\r\n                    elementX < xEnd)\r\n                    this.setLettersData(value, id)\r\n            })\r\n            for (let i = 0, child; child = childs[i]; i++) {\r\n                getElemCoordTouch(child)\r\n            }\r\n        }\r\n        const addSelector = (event) => {\r\n            const childs = element.children\r\n\r\n            const text = event.target.innerText\r\n            if (text.length === 1) this.setLettersDataByMouse(event)\r\n            for (let i = 0, child; child = childs[i]; i++) {\r\n                child.addEventListener('mouseover', inputRender)\r\n            }\r\n        }\r\n        const removeSelector = () => {\r\n            this.wordChecker(this.state.input)\r\n            this.props.nextLevelChecker()\r\n            this.setState({\r\n                input: [],\r\n                selectedLetter: [],\r\n            })\r\n            const childs = element.children\r\n            for (let i = 0, child; child = childs[i]; i++) {\r\n                child.removeEventListener('mouseover', inputRender)\r\n            }\r\n        }\r\n        element.addEventListener('mousedown', addSelector)\r\n        document.addEventListener('mouseup', removeSelector)\r\n\r\n        element.addEventListener('touchmove', touchSelector)\r\n        element.addEventListener('touchstart', touchSelector)\r\n        document.addEventListener('touchend', removeSelector)\r\n\r\n\r\n    }\r\n    render() {\r\n        const { completed, onToggleModal, miscWords, letters } = this.props\r\n        const { input, selectedLetter } = this.state\r\n        const miscWordsCount = miscWords.filter(el => el.guessed).length\r\n        let lettersBlockClass = 'letters-block animate__animated'\r\n        completed ? lettersBlockClass += \" animate__rollOut animate__delay-1s\"\r\n            : lettersBlockClass += \" animate__rollIn\"\r\n        const lettersElement = letters.map((el, index) => {\r\n            const { letter, id } = el;\r\n            let isSelectedLetter = false;\r\n            selectedLetter.forEach(selectedId => {\r\n                if (id === selectedId) isSelectedLetter = true\r\n            });\r\n            const letterClass = isSelectedLetter ?\r\n                `letters__item letters__item--selected letters--index_${index}` :\r\n                `letters__item letters--index_${index}`\r\n            return <span\r\n                id={id}\r\n                key={id}\r\n                className={letterClass}>\r\n                {letter}\r\n            </span>\r\n        })\r\n        const inputLabel = input.map(e => e.letter)\r\n        let btnClass = `misc-words-btn animate__animated animate__rubberBand`\r\n        if (miscWordsCount % 2 !== 0)\r\n            btnClass = 'misc-words-btn animate__animated animate__shakeY'\r\n        return <div className={lettersBlockClass}>\r\n            <div className=\"letters-input\">{inputLabel}</div>\r\n            {miscWordsCount > 0 && <div className={btnClass} onClick={onToggleModal}>\r\n                {miscWordsCount}\r\n            </div>}\r\n            <div className=\"letters\" id=\"letters-block\">\r\n                {lettersElement}\r\n            </div >\r\n        </div>\r\n    }\r\n}","import React from 'react'\r\nimport './MiscWords.scss'\r\n\r\nexport default class MiscWords extends React.Component {\r\n    render() {\r\n        const { onToggleModal, isModalActive, miscWords = [] } = this.props\r\n        const modalClass = isModalActive ? \"misc-words-modal animate__animated animate__zoomIn\" :\r\n            'misc-words-modal misc-words-modal--disabled'\r\n        const miscWordsArr = miscWords.filter(el => el.guessed)\r\n            .map(el =>\r\n                <div\r\n                    className=\"misc-words-modal__word\"\r\n                    key={el.word}>\r\n                    {el.word}\r\n                </div>)\r\n        return <div className={modalClass}>\r\n            <span className=\"misc-words-modal__close\"\r\n                onClick={onToggleModal}>\r\n                X\r\n            </span>\r\n            <h2 className=\"misc-words-modal__title\">Cлова, які правильні, але не підійшли до цього рівня</h2>\r\n            {miscWordsArr}\r\n        </div>\r\n\r\n    }\r\n}","import React from 'react'\r\nimport './LevelPassedAlert.scss'\r\n\r\nconst LevelPassedAlert = ({ level, nextLevelData, levelsAmmount }) => {\r\n    let nextLevelNumber;\r\n    if (nextLevelData.length > 0)\r\n        nextLevelNumber = `next level - ${level + 1}`\r\n    else nextLevelNumber = \"This is last level\"\r\n    return <div\r\n        className=\"level-passed-alert animate__animated animate__fadeInBottomLeft\">\r\n        <p>LEVEL {level}/{levelsAmmount} completed</p>\r\n        <p> {nextLevelNumber} </p>\r\n    </div>\r\n}\r\nexport default LevelPassedAlert","import React from 'react'\r\nimport './GamePassedScreen.scss'\r\nimport { Fireworks } from 'fireworks/lib/react'\r\n\r\nconst GamePassedScreen = ({ onRestartGame }) => {\r\n    let fxProps = {\r\n        count: 2,\r\n        interval: 1500,\r\n        colors: ['#ffd700', '#c04847', '#0ba0e3', '#bada55'],\r\n        calc: (props, i) => ({\r\n            ...props,\r\n            x: window.innerWidth / 2,\r\n            y: 200 + Math.random() * 350 - 50 + (i === 2 ? -80 : 0)\r\n        })\r\n    }\r\n    const restartGame = () => {\r\n        setTimeout(onRestartGame, 500)\r\n    }\r\n    return <>\r\n        <Fireworks {...fxProps} />\r\n        <div className=\"final-screen\">\r\n            <p>Ти той, хто дотримався до кінця!</p>\r\n            <button\r\n                className=\"final-screen__button\"\r\n                onClick={restartGame}> Replay? :) </button>\r\n            <p className=\"copy\">Inspired by WOW</p>\r\n        </div>\r\n    </>\r\n}\r\nexport default GamePassedScreen\r\n\r\n\r\n\r\n","const data = [\r\n    {\r\n        completed: false,\r\n        level: 1,\r\n        templateNumber: 1,\r\n        words: [\r\n            { word: 'Тарас', guessed: false, stretch: false, },\r\n            { word: 'Траса', guessed: false, stretch: false, },\r\n            { word: 'Тара', guessed: false, stretch: true, },\r\n            { word: 'Сара', guessed: false, stretch: true, },\r\n            { word: 'Раса', guessed: false, stretch: true, },\r\n            { word: 'Раста', guessed: false, stretch: true, }\r\n        ],\r\n        letters: [\r\n            { letter: 'А', id: 1 },\r\n            { letter: 'Р', id: 2 },\r\n            { letter: 'С', id: 3 },\r\n            { letter: 'А', id: 4 },\r\n            { letter: 'Т', id: 5 },\r\n        ],\r\n        miscWords: [{ word: \"раст\", guessed: false }]\r\n    },\r\n    {\r\n        completed: false,\r\n        level: 2,\r\n        templateNumber: 2,\r\n        words: [\r\n            { word: 'декор', guessed: false, stretch: false, },\r\n            { word: 'кредо', guessed: false, stretch: true, },\r\n            { word: 'кедр', guessed: false, stretch: false, },\r\n            { word: 'деко', guessed: false, stretch: true, },\r\n            { word: 'код', guessed: false, stretch: false, },\r\n            { word: 'рок', guessed: false, stretch: true, }\r\n        ],\r\n        letters: [\r\n            { letter: 'К', id: 1 },\r\n            { letter: 'Р', id: 2 },\r\n            { letter: 'О', id: 3 },\r\n            { letter: 'Д', id: 4 },\r\n            { letter: 'Е', id: 5 },\r\n        ],\r\n        miscWords: [\r\n            { word: 'док', guessed: false },\r\n            { word: 'орк', guessed: false },\r\n            { word: 'докер', guessed: false },\r\n            { word: 'кодер', guessed: false },\r\n            { word: 'корд', guessed: false },\r\n        ]\r\n    },\r\n    {\r\n        completed: false,\r\n        level: 3,\r\n        templateNumber: 3,\r\n        words: [\r\n            { word: 'блок', guessed: false, stretch: false, },\r\n            { word: 'бокал', guessed: false, stretch: false, },\r\n            { word: 'кола', guessed: false, stretch: false, },\r\n            { word: 'лак', guessed: false, stretch: true, },\r\n            { word: 'бак', guessed: false, stretch: true, },\r\n            { word: 'колба', guessed: false, stretch: true, }\r\n        ],\r\n        letters: [\r\n            { letter: 'К', id: 1 },\r\n            { letter: 'О', id: 2 },\r\n            { letter: 'А', id: 3 },\r\n            { letter: 'Б', id: 4 },\r\n            { letter: 'Л', id: 5 },\r\n        ],\r\n        miscWords: [\r\n            { word: 'бал', guessed: false },\r\n            { word: 'лоб', guessed: false },\r\n            { word: 'бока', guessed: false },\r\n            { word: 'або', guessed: false },\r\n            { word: 'кал', guessed: false },\r\n            { word: 'бола', guessed: false },\r\n        ]\r\n    },\r\n    {\r\n        completed: false,\r\n        level: 4,\r\n        templateNumber: 4,\r\n        words: [\r\n            { word: 'порт', guessed: false, stretch: false, },\r\n            { word: 'тропа', guessed: false, stretch: false, },\r\n            { word: 'ато', guessed: false, stretch: true, },\r\n            { word: 'таро', guessed: false, stretch: false, },\r\n            { word: 'рот', guessed: false, stretch: true, },\r\n            { word: 'апорт', guessed: false, stretch: true, }\r\n        ],\r\n        letters: [\r\n            { letter: 'Р', id: 1 },\r\n            { letter: 'О', id: 2 },\r\n            { letter: 'Т', id: 3 },\r\n            { letter: 'А', id: 4 },\r\n            { letter: 'П', id: 5 },\r\n        ],\r\n        miscWords: [\r\n            { word: 'трап', guessed: false },\r\n            { word: 'пар', guessed: false },\r\n            { word: 'рота', guessed: false },\r\n            { word: 'про', guessed: false },\r\n            { word: 'пора', guessed: false },\r\n            { word: 'пат', guessed: false },\r\n            { word: 'тор', guessed: false },\r\n            { word: 'троп', guessed: false },\r\n        ]\r\n    },\r\n    {\r\n        completed: false,\r\n        level: 5,\r\n        templateNumber: 5,\r\n        words: [\r\n            { word: 'корм', guessed: false, stretch: false, },\r\n            { word: 'корма', guessed: false, stretch: false, },\r\n            { word: 'омар', guessed: false, stretch: true, },\r\n            { word: 'ром', guessed: false, stretch: false, },\r\n            { word: 'рак', guessed: false, stretch: true, },\r\n            { word: 'комар', guessed: false, stretch: true, },\r\n            { word: 'мак', guessed: false, stretch: false, },\r\n            { word: 'акр', guessed: false, stretch: true, },\r\n            { word: 'орк', guessed: false, stretch: true, },\r\n        ],\r\n        letters: [\r\n            { letter: 'О', id: 1 },\r\n            { letter: 'Р', id: 2 },\r\n            { letter: 'К', id: 3 },\r\n            { letter: 'А', id: 4 },\r\n            { letter: 'М', id: 5 },\r\n        ],\r\n        miscWords: [{ word: \"кома\", guessed: false },\r\n        { word: \"кора\", guessed: false },\r\n        { word: \"окра\", guessed: false },\r\n        { word: \"рок\", guessed: false },\r\n        { word: \"мор\", guessed: false },]\r\n    }\r\n]\r\nexport default data","import React from 'react'\r\nimport './App.scss'\r\nimport Template from '../Template/Template'\r\nimport Letters from '../Letters/Letters'\r\nimport MiscWords from '../MiscWords/MiscWords'\r\nimport LevelPassedAlert from '../LevelPassedAlert/LevelPassedAlert'\r\nimport GamePassedScreen from '../GamePassedScreen/GamePassedScreen'\r\nimport data from '../../data/data'\r\n\r\nexport default class App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            modalActive: false,\r\n            currentLevel: 1,\r\n            dataBase: data,\r\n        }\r\n        this.onRestartGame = () => {\r\n            const newGame = data.map(level => {\r\n                level.completed = false\r\n                level.words.map(word => {\r\n                    word.guessed = false\r\n                    return word\r\n                })\r\n                level.miscWords.map(word => {\r\n                    word.guessed = false\r\n                    return word\r\n                })\r\n                return level\r\n            })\r\n            console.log(newGame)\r\n            this.setState({ dataBase: newGame, currentLevel: 1 })\r\n        }\r\n        this.toggleModal = () => {\r\n            this.setState(({ modalActive }) => {\r\n                const newState = !modalActive\r\n                return { modalActive: newState }\r\n            })\r\n        }\r\n        this.setCompletedLevel = (completedLevelObj) => {\r\n            console.log(this.state.dataBase)\r\n            this.setState(({ dataBase }) => {\r\n                completedLevelObj.completed = true;\r\n                const newData = dataBase.map((el) => {\r\n                    if (this.state.currentLevel === el.level)\r\n                        return el = completedLevelObj\r\n                    else return el\r\n                })\r\n                return { dataBase: newData }\r\n            })\r\n        }\r\n        this.nextLevelChecker = () => {\r\n            const { dataBase, currentLevel } = this.state\r\n            const currentLevelData = this.levelChecker(dataBase, currentLevel)\r\n            if (currentLevelData.length > 0) {\r\n                const { words } = currentLevelData[0]\r\n                const wordsLeft = words.filter((element) => element.guessed === false)\r\n                const levelCompleted = wordsLeft.length === 0 ? true : false\r\n                const levelIsLoading = currentLevelData[0].completed\r\n                // next lvl trigger\r\n                if (!levelIsLoading && levelCompleted) setTimeout(this.nextLevel, 2200)\r\n                if (levelCompleted) this.setCompletedLevel(currentLevelData[0])\r\n            }\r\n        }\r\n        this.wordChecker = (enterWord) => {\r\n            const { dataBase, currentLevel } = this.state\r\n            const word = enterWord.map((el) => el.letter).join(\"\")\r\n            const newData = dataBase.map((element) => {\r\n                if (currentLevel === element.level) {\r\n                    element.words.map((elWord) => {\r\n                        const rightWord = elWord.word.toUpperCase()\r\n                        if (rightWord === word) elWord.guessed = true\r\n                        return elWord\r\n                    })\r\n                    element.miscWords.map((elWord) => {\r\n                        const miscWord = elWord.word.toUpperCase()\r\n                        if (miscWord === word) elWord.guessed = true\r\n                        return elWord\r\n                    })\r\n                }\r\n                return element\r\n            })\r\n            this.setState({ dataBase: newData })\r\n        }\r\n        this.levelChecker = (dataBase, currentLevel) => {\r\n            return dataBase.filter(el => el.level === currentLevel)\r\n        }\r\n        this.nextLevel = () => {\r\n            this.setState(({ currentLevel }) => {\r\n                let _level = currentLevel\r\n                let nextLevel = _level + 1\r\n                return { currentLevel: nextLevel }\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const { dataBase, currentLevel, modalActive } = this.state\r\n        const levelData = this.levelChecker(dataBase, currentLevel)\r\n        if (levelData.length > 0) {\r\n\r\n            const { completed, miscWords, letters, level } = levelData[0]\r\n            const { ...WordsTemplate } = levelData[0]\r\n            const levelsAmmount = dataBase.length\r\n            const nextLevelData = this.levelChecker(dataBase, currentLevel + 1)\r\n            return <div className=\"wrapper\">\r\n\r\n                <Template\r\n                    completed={completed}\r\n                    data={WordsTemplate} />\r\n\r\n                <Letters\r\n                    miscWords={miscWords}\r\n                    onToggleModal={this.toggleModal}\r\n                    completed={completed}\r\n                    letters={letters}\r\n                    wordChecker={this.wordChecker}\r\n                    nextLevelChecker={this.nextLevelChecker} />\r\n\r\n                <MiscWords\r\n                    miscWords={miscWords}\r\n                    onToggleModal={this.toggleModal}\r\n                    isModalActive={modalActive} />\r\n\r\n                {completed && <LevelPassedAlert\r\n                    level={level}\r\n                    nextLevelData={nextLevelData}\r\n                    levelsAmmount={levelsAmmount} />}\r\n\r\n            </div>\r\n        }\r\n        else return <div className=\"wrapper\">\r\n            <GamePassedScreen\r\n                onRestartGame={this.onRestartGame} />\r\n        </div>\r\n    }\r\n}\r\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <StrictMode>  <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}