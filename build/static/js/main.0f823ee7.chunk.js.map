{"version":3,"sources":["components/Template/Template.js","components/Letters/Letters.js","components/App/App.js","index.js"],"names":["keys","Template","props","renderTemplateById","type","wordsArr","map","word","index","key","templateNumber","wordIndex","guessed","this","words","data","template","className","React","Component","Word","lettersArr","zIndex","letterClass","wordClass","stretch","style","templateNum","templateChange","res","e","toUpperCase","Letters","state","input","selectedLetter","touchedLine","obj","setSelectedLetter","id","setState","newArr","el","push","Number","setInput","letter","canRender","forEach","element","lettersData","setLettersData","setLettersDataByMouse","event","target","innerText","wordChecker","window","onload","document","getElementById","inputRender","getElemCoordTouch","child","length","value","xStart","Math","floor","getBoundingClientRect","x","xEnd","width","yStart","y","yEnd","height","touchSelector","childs","children","elementX","changedTouches","clientX","elementY","clientY","preventDefault","i","removeSelector","nextLevelChecker","removeEventListener","addEventListener","letters","isSelectedLetter","selectedId","inputLabel","App","currentLevel","dataBase","level","levelChecker","filter","setTimeout","nextLevel","enterWord","join","newData","elWord","levelData","WordsTemplate","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0f823ee7.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Template.scss'\r\n\r\nlet keys = 0;\r\n\r\nexport default class Template extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.renderTemplateById = (type, wordsArr) => {\r\n            // template #1\r\n            return wordsArr.map((word, index) => {\r\n                return <Word\r\n                    word={word.word}\r\n                    key={word.word}\r\n                    templateNumber={type}\r\n                    wordIndex={index}\r\n                    guessed={word.guessed}\r\n                />\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const { data: { words }, data: { templateNumber } } = this.props\r\n        const template = this.renderTemplateById(templateNumber, words)\r\n        return <div className=\"template\">\r\n            {template}\r\n        </div>\r\n    }\r\n}\r\n\r\nconst Word = ({ word, templateNumber, wordIndex, guessed }) => {\r\n    const lettersArr = [...word]\r\n    let zIndex = 0;\r\n    let letterClass = \"template__letter-inner\"\r\n    let wordClass = \"template__word\"\r\n    if (guessed) {\r\n        letterClass += \" template__letter-inner--visible animate__animated animate__fadeInUpBig\";\r\n        zIndex = 1\r\n    }\r\n    let stretch = false\r\n    function templateChange(templateNum) {\r\n        // template #1\r\n        if (templateNum === 1) {\r\n            switch (wordIndex) {\r\n                case 2: stretch = true; break;\r\n                case 4: stretch = true; break;\r\n                case 5: stretch = true; break;\r\n                case 3: stretch = true; break;\r\n                default: break\r\n            }\r\n            wordClass += \" template_1\"\r\n        }\r\n        // \r\n        if (stretch) wordClass += \" template__word--stretch\"\r\n        switch (wordIndex) {\r\n            case 0: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 1: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 2: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 3: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 4: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 5: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            default: break\r\n        }\r\n    }\r\n    // zet index\r\n    const style = {\r\n        zIndex: zIndex,\r\n    }\r\n    templateChange(templateNumber)\r\n    const res = lettersArr.map((e) => {\r\n        return <div className=\"template__letter\" key={keys++}>\r\n            <span className={letterClass}>\r\n                {e.toUpperCase()}\r\n            </span>\r\n        </div>\r\n    })\r\n    return <div className={wordClass} style={style} >\r\n        {res}\r\n    </div>\r\n}","import React from 'react'\r\nimport './Letters.scss'\r\n\r\nexport default class Letters extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            input: [],\r\n            selectedLetter: [],\r\n            touchedLine: []\r\n        }\r\n        let obj = []\r\n        this.setSelectedLetter = (id) => {\r\n            this.setState(({ selectedLetter }) => {\r\n                const newArr = selectedLetter.map(el => el)\r\n                newArr.push(Number(id))\r\n                return { selectedLetter: newArr }\r\n            })\r\n        }\r\n        this.setInput = (letter, id) => {\r\n            let canRender = true;\r\n            this.state.input.forEach(element => {\r\n                if (element.id === id)\r\n                    canRender = false\r\n            });\r\n            if (canRender) this.setState(({ input }) => {\r\n                let lettersData = input.map(e => e)\r\n                lettersData.push(\r\n                    {\r\n                        letter: letter,\r\n                        id: id\r\n                    }\r\n                )\r\n                return { input: lettersData }\r\n            })\r\n        }\r\n        this.setLettersData = (letter, id) => {\r\n            this.setInput(letter, id)\r\n            this.setSelectedLetter(id)\r\n        }\r\n        this.setLettersDataByMouse = (event) => {\r\n            const { innerText, id } = event.target\r\n            this.setLettersData(innerText, id)\r\n        }\r\n        this.wordChecker = (element) => {\r\n            const { wordChecker } = this.props\r\n            wordChecker(element)\r\n        }\r\n\r\n        window.onload = () => {\r\n            const element = document.getElementById('letters-block')\r\n\r\n            const inputRender = (event) => {\r\n                this.setLettersDataByMouse(event)\r\n            }\r\n            const getElemCoordTouch = (child) => {\r\n                if (obj.length < 5) obj.push({\r\n                    value: child.innerText,\r\n                    id: child.id,\r\n                    xStart: Math.floor(child.getBoundingClientRect().x),\r\n                    xEnd: Math.floor(child.getBoundingClientRect().x + child.getBoundingClientRect().width),\r\n                    yStart: Math.floor(child.getBoundingClientRect().y),\r\n                    yEnd: Math.floor(child.getBoundingClientRect().y + child.getBoundingClientRect().height)\r\n                })\r\n            }\r\n            const touchSelector = (event) => {\r\n                const childs = element.children\r\n                let elementX = event.changedTouches[0].clientX\r\n                let elementY = event.changedTouches[0].clientY\r\n                event.preventDefault()\r\n                obj.forEach(el => {\r\n                    const { yStart, yEnd, xStart, xEnd, value, id } = el\r\n                    if (elementY > yStart &&\r\n                        elementY < yEnd &&\r\n                        elementX > xStart &&\r\n                        elementX < xEnd)\r\n                        this.setLettersData(value, id)\r\n                })\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    getElemCoordTouch(child)\r\n                }\r\n            }\r\n            const addSelector = (event) => {\r\n                const childs = element.children\r\n                const text = event.target.innerText\r\n                if (text.length === 1) this.setLettersDataByMouse(event)\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    child.addEventListener('mouseover', inputRender)\r\n                }\r\n            }\r\n            const removeSelector = () => {\r\n                this.wordChecker(this.state.input)\r\n                this.props.nextLevelChecker()\r\n                this.setState({\r\n                    input: [],\r\n                    selectedLetter: [],\r\n                    touchedLine: []\r\n                })\r\n                const childs = element.children\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    child.removeEventListener('mouseover', inputRender)\r\n                }\r\n            }\r\n            element.addEventListener('mousedown', addSelector)\r\n            document.addEventListener('mouseup', removeSelector)\r\n\r\n            element.addEventListener('touchmove', touchSelector)\r\n            element.addEventListener('touchstart', touchSelector)\r\n            document.addEventListener('touchend', removeSelector)\r\n        }\r\n    }\r\n    render() {\r\n        const { input, selectedLetter } = this.state\r\n        const letters = this.props.letters.map((el, index) => {\r\n            const { letter, id } = el;\r\n            let isSelectedLetter = false;\r\n            selectedLetter.forEach(selectedId => {\r\n                if (id === selectedId) isSelectedLetter = true\r\n            });\r\n            const letterClass = isSelectedLetter ?\r\n                `letters__item letters__item--selected letters--index_${index}` :\r\n                `letters__item letters--index_${index}`\r\n            return <span\r\n                id={id}\r\n                key={id}\r\n                className={letterClass}>\r\n                {letter}\r\n            </span>\r\n        })\r\n        const inputLabel = input.map(e => e.letter)\r\n        return <div className=\"letters-block\" id=\"test\">\r\n            {this.state.touchedLine}\r\n            <div className=\"letters-input\">{inputLabel}</div>\r\n            <div className=\"letters\" id=\"letters-block\">\r\n                {letters}\r\n            </div >\r\n        </div>\r\n    }\r\n}","import React from 'react'\r\nimport './App.scss'\r\nimport Template from '../Template/Template'\r\nimport Letters from '../Letters/Letters'\r\n\r\nexport default class App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            currentLevel: 1,\r\n            dataBase: [\r\n                {\r\n                    level: 1,\r\n                    templateNumber: 1,\r\n                    words: [\r\n                        { word: 'Тарас', guessed: false, },\r\n                        { word: 'Траса', guessed: false },\r\n                        { word: 'Тара', guessed: false },\r\n                        { word: 'Сара', guessed: false },\r\n                        { word: 'Раса', guessed: false },\r\n                        { word: 'Раста', guessed: false }\r\n                    ],\r\n                    letters: [\r\n                        { letter: 'А', id: 1 },\r\n                        { letter: 'Р', id: 2 },\r\n                        { letter: 'С', id: 3 },\r\n                        { letter: 'А', id: 4 },\r\n                        { letter: 'Т', id: 5 },\r\n                    ]\r\n                },\r\n                {\r\n                    level: 2,\r\n                    templateNumber: 1,\r\n                    words: [\r\n                        { word: 'крона', guessed: true, },\r\n                        { word: 'коран', guessed: true },\r\n                        { word: 'кора', guessed: true },\r\n                        { word: 'нора', guessed: true },\r\n                        { word: 'кран', guessed: false },\r\n                        { word: 'ранок', guessed: true }\r\n                    ],\r\n                    letters: [\r\n                        { letter: 'К', id: 1 },\r\n                        { letter: 'Р', id: 2 },\r\n                        { letter: 'О', id: 3 },\r\n                        { letter: 'А', id: 4 },\r\n                        { letter: 'Н', id: 5 },\r\n                    ]\r\n                },\r\n            ],\r\n\r\n        }\r\n        this.nextLevelChecker = () => {\r\n            const { dataBase, currentLevel } = this.state\r\n            const currentLevelData = this.levelChecker(dataBase, currentLevel)\r\n            const { words } = currentLevelData[0]\r\n            const wordsLeft = words.filter((element) => element.guessed === false)\r\n            const levelCompleted = wordsLeft.length === 0 ? true : false\r\n            if (levelCompleted) setTimeout(this.nextLevel, 1500)\r\n        }\r\n        this.wordChecker = (enterWord) => {\r\n            const { dataBase, currentLevel } = this.state\r\n            const word = enterWord.map((el) => el.letter).join(\"\")\r\n            const newData = dataBase.map((element) => {\r\n                if (currentLevel === element.level)\r\n                    element.words.map((elWord) => {\r\n                        const rightWord = elWord.word.toUpperCase()\r\n                        if (rightWord === word) elWord.guessed = true\r\n                    })\r\n                return element\r\n            })\r\n            this.setState({ dataBase: newData })\r\n        }\r\n        this.levelChecker = (dataBase, currentLevel) => {\r\n            return dataBase.filter(el => {\r\n                const { level, templateNumber, words, letters } = el\r\n                if (level === currentLevel) return { templateNumber, words, letters }\r\n            })\r\n        }\r\n        this.nextLevel = () => {\r\n            this.setState(({ currentLevel }) => {\r\n                let _level = currentLevel\r\n                let nextLevel = _level + 1\r\n                return { currentLevel: nextLevel }\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const { dataBase, currentLevel } = this.state\r\n        const levelData = this.levelChecker(dataBase, currentLevel)\r\n        const { letters } = levelData[0]\r\n        const { ...WordsTemplate } = levelData[0]\r\n        return <div className=\"wrapper\">\r\n\r\n            <Template\r\n                data={WordsTemplate} />\r\n\r\n            <Letters\r\n                letters={letters}\r\n                wordChecker={this.wordChecker}\r\n                nextLevelChecker={this.nextLevelChecker} />\r\n\r\n        </div>\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}