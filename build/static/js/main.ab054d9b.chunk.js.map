{"version":3,"sources":["components/Template/Template.js","components/Letters/Letters.js","components/MiscWords/MiscWords.js","data/data.js","components/App/App.js","index.js"],"names":["keys","Template","props","guessedWords","renderTemplateById","type","wordsArr","map","word","index","isWordGuessed","guessedWordsChecker","key","templateNumber","wordIndex","guessed","addGuessedWord","push","includes","this","words","data","templateClass","completed","template","className","React","Component","Word","lettersArr","zIndex","letterClass","wordClass","stretch","style","templateNum","templateChange","res","e","toUpperCase","Letters","state","input","selectedLetter","lettersCoord","setSelectedLetter","id","setState","newArr","el","Number","setInput","letter","canRender","forEach","element","lettersData","setLettersData","setLettersDataByMouse","event","target","innerText","wordChecker","window","onload","document","getElementById","inputRender","getElemCoordTouch","child","length","value","xStart","Math","floor","getBoundingClientRect","x","xEnd","width","yStart","y","yEnd","height","touchSelector","childs","children","elementX","changedTouches","clientX","elementY","clientY","preventDefault","i","removeSelector","nextLevelChecker","touchedLine","removeEventListener","addEventListener","onToggleModal","miscWords","miscWordsCount","filter","lettersBlockClass","letters","isSelectedLetter","selectedId","inputLabel","btnClass","onClick","MiscWords","isModalActive","modalClass","miscWordsArr","level","App","modalActive","currentLevel","dataBase","toggleModal","setCompletedLevel","completedLevelObj","currentLevelData","levelChecker","levelCompleted","setTimeout","nextLevel","enterWord","join","newData","elWord","levelData","WordsTemplate","ReactDOM","render"],"mappings":"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","file":"static/js/main.ab054d9b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Template.scss'\r\n\r\nlet keys = 0;\r\n\r\nexport default class Template extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const guessedWords = []\r\n        this.renderTemplateById = (type, wordsArr) => {\r\n            // template #1\r\n            return wordsArr.map((word, index) => {\r\n                return <Word\r\n                    isWordGuessed={this.guessedWordsChecker}\r\n                    word={word.word}\r\n                    key={word.word}\r\n                    templateNumber={type}\r\n                    wordIndex={index}\r\n                    guessed={word.guessed}\r\n                />\r\n            })\r\n        }\r\n        this.addGuessedWord = (word) => {\r\n            guessedWords.push(word)\r\n        }\r\n        this.guessedWordsChecker = (word) => {\r\n            if (guessedWords.includes(word)) return true\r\n            else { this.addGuessedWord(word); return false }\r\n\r\n        }\r\n    }\r\n    render() {\r\n        const { data: { words }, data: { templateNumber }, data: { completed } } = this.props\r\n        let templateClass = 'template'\r\n        if (completed) templateClass += ' animate__animated animate__flipOutY animate__delay-1s'\r\n        else templateClass += ' animate__animated animate__flipInY'\r\n        const template = this.renderTemplateById(templateNumber, words)\r\n        return <div className={templateClass}>\r\n            {template}\r\n        </div>\r\n    }\r\n}\r\n\r\nconst Word = ({ word, templateNumber, wordIndex, guessed, isWordGuessed }) => {\r\n    const lettersArr = [...word]\r\n    let zIndex = 0;\r\n    let letterClass = \"template__letter-inner\"\r\n    let wordClass = \"template__word\"\r\n    if (guessed) {\r\n        zIndex = 1\r\n        if (isWordGuessed(word)) {\r\n            letterClass += \" template__letter-inner--visible\"\r\n            zIndex++\r\n        }\r\n        else letterClass += \" template__letter-inner--visible animate__animated animate__fadeInUp\"\r\n    }\r\n    let stretch = false\r\n    function templateChange(templateNum) {\r\n        // template #1\r\n        if (templateNum === 1) {\r\n            switch (wordIndex) {\r\n                case 2: stretch = true; break;\r\n                case 4: stretch = true; break;\r\n                case 5: stretch = true; break;\r\n                case 3: stretch = true; break;\r\n                default: break\r\n            }\r\n            wordClass += \" template_1\"\r\n        }\r\n        if (templateNum === 2) {\r\n            switch (wordIndex) {\r\n                case 1: stretch = true; break;\r\n                case 5: stretch = true; break;\r\n                case 3: stretch = true; break;\r\n                default: break\r\n            }\r\n            wordClass += \" template_2\"\r\n        }\r\n        if (templateNum === 3) {\r\n            switch (wordIndex) {\r\n                case 2: stretch = true; break;\r\n                case 4: stretch = true; break;\r\n                case 5: stretch = true; break;\r\n                case 3: stretch = true; break;\r\n                default: break\r\n            }\r\n            wordClass += \" template_3\"\r\n        }\r\n        // \r\n        if (stretch) wordClass += \" template__word--stretch\"\r\n        switch (wordIndex) {\r\n            case 0: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 1: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 2: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 3: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 4: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 5: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            default: break\r\n        }\r\n    }\r\n    // zet index\r\n    const style = {\r\n        zIndex: zIndex,\r\n    }\r\n    templateChange(templateNumber)\r\n    const res = lettersArr.map((e) => {\r\n        return <div className=\"template__letter\" key={keys++}>\r\n            <span className={letterClass}>\r\n                {e.toUpperCase()}\r\n            </span>\r\n        </div>\r\n    })\r\n    return <div className={wordClass} style={style} >\r\n        {res}\r\n    </div>\r\n}\r\n","import React from 'react'\r\nimport './Letters.scss'\r\n\r\nexport default class Letters extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            input: [],\r\n            selectedLetter: [],\r\n        }\r\n        let lettersCoord = []\r\n        this.setSelectedLetter = (id) => {\r\n            this.setState(({ selectedLetter }) => {\r\n                const newArr = selectedLetter.map(el => el)\r\n                newArr.push(Number(id))\r\n                return { selectedLetter: newArr }\r\n            })\r\n        }\r\n        this.setInput = (letter, id) => {\r\n            let canRender = true;\r\n            this.state.input.forEach(element => {\r\n                if (element.id === id)\r\n                    canRender = false\r\n            });\r\n            if (canRender) this.setState(({ input }) => {\r\n                let lettersData = input.map(e => e)\r\n                lettersData.push(\r\n                    {\r\n                        letter: letter,\r\n                        id: id\r\n                    }\r\n                )\r\n                return { input: lettersData }\r\n            })\r\n        }\r\n        this.setLettersData = (letter, id) => {\r\n            this.setInput(letter, id)\r\n            this.setSelectedLetter(id)\r\n        }\r\n        this.setLettersDataByMouse = (event) => {\r\n            const { innerText, id } = event.target\r\n            this.setLettersData(innerText, id)\r\n        }\r\n        this.wordChecker = (element) => {\r\n            const { wordChecker } = this.props\r\n            wordChecker(element)\r\n        }\r\n\r\n        window.onload = () => {\r\n            const element = document.getElementById('letters-block')\r\n\r\n            const inputRender = (event) => {\r\n                this.setLettersDataByMouse(event)\r\n            }\r\n            const getElemCoordTouch = (child) => {\r\n                if (lettersCoord.length < 5) lettersCoord.push({\r\n                    value: child.innerText,\r\n                    id: child.id,\r\n                    xStart: Math.floor(child.getBoundingClientRect().x),\r\n                    xEnd: Math.floor(child.getBoundingClientRect().x + child.getBoundingClientRect().width),\r\n                    yStart: Math.floor(child.getBoundingClientRect().y),\r\n                    yEnd: Math.floor(child.getBoundingClientRect().y + child.getBoundingClientRect().height)\r\n                })\r\n                else lettersCoord = []\r\n            }\r\n            const touchSelector = (event) => {\r\n                const childs = element.children\r\n                let elementX = event.changedTouches[0].clientX\r\n                let elementY = event.changedTouches[0].clientY\r\n                event.preventDefault()\r\n                lettersCoord.forEach(el => {\r\n                    const { yStart, yEnd, xStart, xEnd, value, id } = el\r\n                    if (elementY > yStart &&\r\n                        elementY < yEnd &&\r\n                        elementX > xStart &&\r\n                        elementX < xEnd)\r\n                        this.setLettersData(value, id)\r\n                })\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    getElemCoordTouch(child)\r\n                }\r\n            }\r\n            const addSelector = (event) => {\r\n                const childs = element.children\r\n                const text = event.target.innerText\r\n                if (text.length === 1) this.setLettersDataByMouse(event)\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    child.addEventListener('mouseover', inputRender)\r\n                }\r\n            }\r\n            const removeSelector = () => {\r\n                this.wordChecker(this.state.input)\r\n                this.props.nextLevelChecker()\r\n                this.setState({\r\n                    input: [],\r\n                    selectedLetter: [],\r\n                    touchedLine: []\r\n                })\r\n                const childs = element.children\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    child.removeEventListener('mouseover', inputRender)\r\n                }\r\n            }\r\n            element.addEventListener('mousedown', addSelector)\r\n            document.addEventListener('mouseup', removeSelector)\r\n\r\n            element.addEventListener('touchmove', touchSelector)\r\n            element.addEventListener('touchstart', touchSelector)\r\n            document.addEventListener('touchend', removeSelector)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { completed, onToggleModal, miscWords = [] } = this.props\r\n        const { input, selectedLetter } = this.state\r\n        const miscWordsCount = miscWords.filter(el => el.guessed).length\r\n        let lettersBlockClass = 'letters-block animate__animated'\r\n        completed ? lettersBlockClass += \" animate__rollOut animate__delay-1s\"\r\n            : lettersBlockClass += \" animate__rollIn\"\r\n        const letters = this.props.letters.map((el, index) => {\r\n            const { letter, id } = el;\r\n            let isSelectedLetter = false;\r\n            selectedLetter.forEach(selectedId => {\r\n                if (id === selectedId) isSelectedLetter = true\r\n            });\r\n            const letterClass = isSelectedLetter ?\r\n                `letters__item letters__item--selected letters--index_${index}` :\r\n                `letters__item letters--index_${index}`\r\n            return <span\r\n                id={id}\r\n                key={id}\r\n                className={letterClass}>\r\n                {letter}\r\n            </span>\r\n        })\r\n        const inputLabel = input.map(e => e.letter)\r\n        let btnClass = `misc-words-btn animate__animated animate__rubberBand`\r\n        if (miscWordsCount % 2 !== 0)\r\n            btnClass = 'misc-words-btn animate__animated animate__shakeY'\r\n        return <div className={lettersBlockClass}>\r\n            <div className=\"letters-input\">{inputLabel}</div>\r\n            {miscWordsCount > 0 && <div className={btnClass} onClick={onToggleModal}>\r\n                {miscWordsCount}\r\n            </div>}\r\n            <div className=\"letters\" id=\"letters-block\">\r\n                {letters}\r\n            </div >\r\n        </div>\r\n    }\r\n}","import React from 'react'\r\nimport './MiscWords.scss'\r\n\r\nexport default class MiscWords extends React.Component {\r\n    render() {\r\n        const { onToggleModal, isModalActive, miscWords = [] } = this.props\r\n        const modalClass = isModalActive ? \"misc-words-modal animate__animated animate__zoomIn\" :\r\n            'misc-words-modal misc-words-modal--disabled animate__animated animate__flipOutY'\r\n        const miscWordsArr = miscWords.filter(el => el.guessed)\r\n            .map(el =>\r\n                <div\r\n                    className=\"misc-words-modal__word\"\r\n                    key={el.word}>\r\n                    {el.word}\r\n                </div>)\r\n        return <div className={modalClass}>\r\n            <span className=\"misc-words-modal__close\"\r\n                onClick={onToggleModal}>\r\n                X\r\n            </span>\r\n            <h2 className=\"misc-words-modal__title\">Cлова, які правильні, але не підійшли до цього рівня</h2>\r\n            {miscWordsArr}\r\n        </div>\r\n\r\n    }\r\n}","const data = [\r\n    {\r\n        completed: false,\r\n        level: 1,\r\n        templateNumber: 1,\r\n        words: [\r\n            { word: 'Тарас', guessed: false, },\r\n            { word: 'Траса', guessed: false },\r\n            { word: 'Тара', guessed: false },\r\n            { word: 'Сара', guessed: false },\r\n            { word: 'Раса', guessed: false },\r\n            { word: 'Раста', guessed: false }\r\n        ],\r\n        letters: [\r\n            { letter: 'А', id: 1 },\r\n            { letter: 'Р', id: 2 },\r\n            { letter: 'С', id: 3 },\r\n            { letter: 'А', id: 4 },\r\n            { letter: 'Т', id: 5 },\r\n        ],\r\n        miscWords: [{ word: \"раст\", guessed: false }]\r\n    },\r\n    {\r\n        completed: false,\r\n        level: 2,\r\n        templateNumber: 2,\r\n        words: [\r\n            { word: 'декор', guessed: false, },\r\n            { word: 'кредо', guessed: false },\r\n            { word: 'кедр', guessed: false },\r\n            { word: 'деко', guessed: false },\r\n            { word: 'код', guessed: false },\r\n            { word: 'рок', guessed: false }\r\n        ],\r\n        letters: [\r\n            { letter: 'К', id: 1 },\r\n            { letter: 'Р', id: 2 },\r\n            { letter: 'О', id: 3 },\r\n            { letter: 'Д', id: 4 },\r\n            { letter: 'Е', id: 5 },\r\n        ],\r\n        miscWords: [\r\n            { word: 'док', guessed: false },\r\n            { word: 'орк', guessed: false },\r\n            { word: 'докер', guessed: false },\r\n            { word: 'кодер', guessed: false },\r\n            { word: 'корд', guessed: false },\r\n        ]\r\n    },\r\n    {\r\n        completed: false,\r\n        level: 3,\r\n        templateNumber: 3,\r\n        words: [\r\n            { word: 'колба', guessed: true, },\r\n            { word: 'бокал', guessed: true },\r\n            { word: 'кедр', guessed: true },\r\n            { word: 'деко', guessed: true },\r\n            { word: 'код', guessed: false },\r\n            { word: 'кола', guessed: false }\r\n        ],\r\n        letters: [\r\n            { letter: 'К', id: 1 },\r\n            { letter: 'Р', id: 2 },\r\n            { letter: 'О', id: 3 },\r\n            { letter: 'Д', id: 4 },\r\n            { letter: 'Е', id: 5 },\r\n        ],\r\n        miscWords: [\r\n            { word: 'док', guessed: false },\r\n            { word: 'орк', guessed: false },\r\n            { word: 'докер', guessed: false },\r\n            { word: 'кодер', guessed: false },\r\n            { word: 'корд', guessed: false },\r\n        ]\r\n    }\r\n]\r\nexport default data","import React from 'react'\r\nimport './App.scss'\r\nimport Template from '../Template/Template'\r\nimport Letters from '../Letters/Letters'\r\nimport MiscWords from '../MiscWords/MiscWords'\r\nimport data from '../../data/data'\r\n\r\nexport default class App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            modalActive: false,\r\n            currentLevel: 1,\r\n            dataBase: data,\r\n        }\r\n        this.toggleModal = () => {\r\n            this.setState(({ modalActive }) => {\r\n                const newState = !modalActive\r\n                return { modalActive: newState }\r\n            })\r\n        }\r\n        this.setCompletedLevel = (completedLevelObj) => {\r\n            this.setState(({ dataBase }) => {\r\n                completedLevelObj.completed = true;\r\n                const newData = dataBase.map((el) => {\r\n                    if (this.state.currentLevel === el.level)\r\n                        return el = completedLevelObj\r\n                    else return el\r\n                })\r\n                return { dataBase: newData }\r\n            })\r\n        }\r\n        this.nextLevelChecker = () => {\r\n            const { dataBase, currentLevel } = this.state\r\n            const currentLevelData = this.levelChecker(dataBase, currentLevel)\r\n            const { words } = currentLevelData[0]\r\n            const wordsLeft = words.filter((element) => element.guessed === false)\r\n            const levelCompleted = wordsLeft.length === 0 ? true : false\r\n            const levelIsLoading = currentLevelData[0].completed\r\n            // next lvl trigger\r\n            if (!levelIsLoading && levelCompleted) setTimeout(this.nextLevel, 1900)\r\n            if (levelCompleted) this.setCompletedLevel(currentLevelData[0])\r\n        }\r\n        this.wordChecker = (enterWord) => {\r\n            const { dataBase, currentLevel } = this.state\r\n            const word = enterWord.map((el) => el.letter).join(\"\")\r\n            const newData = dataBase.map((element) => {\r\n                if (currentLevel === element.level) {\r\n                    element.words.map((elWord) => {\r\n                        const rightWord = elWord.word.toUpperCase()\r\n                        if (rightWord === word) elWord.guessed = true\r\n                    })\r\n                    element.miscWords.map((elWord) => {\r\n                        const miscWord = elWord.word.toUpperCase()\r\n                        if (miscWord === word) elWord.guessed = true\r\n                    })\r\n                }\r\n                return element\r\n            })\r\n            this.setState({ dataBase: newData })\r\n        }\r\n        this.levelChecker = (dataBase, currentLevel) => {\r\n            return dataBase.filter(el => {\r\n                const { level } = el\r\n                if (level === currentLevel) return el\r\n            })\r\n        }\r\n        this.nextLevel = () => {\r\n            this.setState(({ currentLevel }) => {\r\n                let _level = currentLevel\r\n                let nextLevel = _level + 1\r\n                return { currentLevel: nextLevel }\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const { dataBase, currentLevel, modalActive } = this.state\r\n        const levelData = this.levelChecker(dataBase, currentLevel)\r\n        const { letters } = levelData[0]\r\n        const { completed } = levelData[0]\r\n        const { miscWords } = levelData[0]\r\n        const { ...WordsTemplate } = levelData[0]\r\n\r\n        return <div className=\"wrapper\">\r\n\r\n            <Template\r\n                data={WordsTemplate} />\r\n\r\n            <Letters\r\n                miscWords={miscWords}\r\n                onToggleModal={this.toggleModal}\r\n                completed={completed}\r\n                letters={letters}\r\n                wordChecker={this.wordChecker}\r\n                nextLevelChecker={this.nextLevelChecker} />\r\n\r\n            <MiscWords\r\n                miscWords={miscWords}\r\n                onToggleModal={this.toggleModal}\r\n                isModalActive={modalActive} />\r\n        </div>\r\n    }\r\n}","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <StrictMode>  <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}