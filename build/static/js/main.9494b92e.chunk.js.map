{"version":3,"sources":["components/Template/Template.js","components/Letters/Letters.js","components/MiscWords/MiscWords.js","components/LevelPassedAlert/LevelPassedAlert.js","components/GamePassedScreen/GamePassedScreen.js","data/data.js","components/App/App.js","index.js"],"names":["keys","Template","props","guessedWords","renderTemplateById","type","wordsArr","map","word","index","isWordGuessed","guessedWordsChecker","key","templateNumber","wordIndex","guessed","stretch","addGuessedWord","push","includes","this","words","data","completed","templateClass","template","className","React","Component","Word","lettersArr","zIndex","letterClass","wordClass","style","templateChange","res","e","toUpperCase","Letters","state","input","selectedLetter","lettersCoord","setSelectedLetter","id","setState","newArr","el","Number","setInput","letter","canRender","forEach","element","lettersData","setLettersData","setLettersDataByMouse","event","target","innerText","wordChecker","window","onload","document","getElementById","inputRender","getElemCoordTouch","child","length","value","xStart","Math","floor","getBoundingClientRect","x","xEnd","width","yStart","y","yEnd","height","touchSelector","childs","children","elementX","changedTouches","clientX","elementY","clientY","preventDefault","i","removeSelector","nextLevelChecker","touchedLine","removeEventListener","addEventListener","onToggleModal","miscWords","letters","miscWordsCount","filter","lettersBlockClass","lettersElement","isSelectedLetter","selectedId","inputLabel","btnClass","onClick","MiscWords","isModalActive","modalClass","miscWordsArr","LevelPassedAlert","nextLevelNumber","level","nextLevelData","levelsAmmount","GamePassedScreen","onRestartGame","fxProps","count","interval","colors","calc","innerWidth","random","setTimeout","App","modalActive","currentLevel","dataBase","toggleModal","setCompletedLevel","completedLevelObj","currentLevelData","levelChecker","levelCompleted","nextLevel","enterWord","join","newData","elWord","levelData","WordsTemplate","ReactDOM","render"],"mappings":"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","file":"static/js/main.9494b92e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Template.scss'\r\n\r\nlet keys = 0;\r\n\r\nexport default class Template extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const guessedWords = []\r\n        this.renderTemplateById = (type, wordsArr) => {\r\n            // template #1\r\n            return wordsArr.map((word, index) => {\r\n                return <Word\r\n                    isWordGuessed={this.guessedWordsChecker}\r\n                    word={word.word}\r\n                    key={word.word}\r\n                    templateNumber={type}\r\n                    wordIndex={index}\r\n                    guessed={word.guessed}\r\n                    stretch={word.stretch}\r\n                />\r\n            })\r\n        }\r\n        this.addGuessedWord = (word) => {\r\n            guessedWords.push(word)\r\n        }\r\n        this.guessedWordsChecker = (word) => {\r\n            if (guessedWords.includes(word)) return true\r\n            else { this.addGuessedWord(word); return false }\r\n\r\n        }\r\n    }\r\n    render() {\r\n        const { data: { words }, data: { templateNumber }, data: { completed } } = this.props\r\n        let templateClass = `template template_${templateNumber}`\r\n        if (completed) templateClass += ' animate__animated animate__flipOutY animate__delay-1s'\r\n        else templateClass += ' animate__animated animate__flipInY'\r\n        const template = this.renderTemplateById(templateNumber, words)\r\n        return <div className={templateClass}>\r\n            {template}\r\n        </div>\r\n    }\r\n}\r\n\r\nconst Word = ({ word, stretch, wordIndex, guessed, isWordGuessed }) => {\r\n    const lettersArr = [...word]\r\n    let zIndex = 0;\r\n    let letterClass = \"template__letter-inner\"\r\n    let wordClass = \"template__word\"\r\n    if (guessed) {\r\n        zIndex = 1\r\n        if (isWordGuessed(word)) {\r\n            letterClass += \" template__letter-inner--visible\"\r\n            zIndex++\r\n        }\r\n        else letterClass += \" template__letter-inner--visible animate__animated animate__fadeInUp\"\r\n    }\r\n    function templateChange(stretch) {\r\n        if (stretch) wordClass += \" template__word--stretch\"\r\n        switch (wordIndex) {\r\n            case 0: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 1: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 2: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 3: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 4: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 5: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            default: break\r\n        }\r\n    }\r\n    // zet index\r\n    const style = {\r\n        zIndex: zIndex,\r\n    }\r\n    templateChange(stretch)\r\n    const res = lettersArr.map((e) => {\r\n        return <div className=\"template__letter\" key={keys++}>\r\n            <span className={letterClass}>\r\n                {e.toUpperCase()}\r\n            </span>\r\n        </div>\r\n    })\r\n    return <div className={wordClass} style={style} >\r\n        {res}\r\n    </div>\r\n}\r\n","import React from 'react'\r\nimport './Letters.scss'\r\n\r\nexport default class Letters extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            input: [],\r\n            selectedLetter: [],\r\n        }\r\n        let lettersCoord = []\r\n        this.setSelectedLetter = (id) => {\r\n            this.setState(({ selectedLetter }) => {\r\n                const newArr = selectedLetter.map(el => el)\r\n                newArr.push(Number(id))\r\n                return { selectedLetter: newArr }\r\n            })\r\n        }\r\n        this.setInput = (letter, id) => {\r\n            let canRender = true;\r\n            this.state.input.forEach(element => {\r\n                if (element.id === id)\r\n                    canRender = false\r\n            });\r\n            if (canRender) this.setState(({ input }) => {\r\n                let lettersData = input.map(e => e)\r\n                lettersData.push(\r\n                    {\r\n                        letter: letter,\r\n                        id: id\r\n                    }\r\n                )\r\n                return { input: lettersData }\r\n            })\r\n        }\r\n        this.setLettersData = (letter, id) => {\r\n            this.setInput(letter, id)\r\n            this.setSelectedLetter(id)\r\n        }\r\n        this.setLettersDataByMouse = (event) => {\r\n            const { innerText, id } = event.target\r\n            this.setLettersData(innerText, id)\r\n        }\r\n        this.wordChecker = (element) => {\r\n            const { wordChecker } = this.props\r\n            wordChecker(element)\r\n        }\r\n\r\n        window.onload = () => {\r\n            const element = document.getElementById('letters-block')\r\n\r\n            const inputRender = (event) => {\r\n                this.setLettersDataByMouse(event)\r\n            }\r\n            const getElemCoordTouch = (child) => {\r\n                if (lettersCoord.length < 5) lettersCoord.push({\r\n                    value: child.innerText,\r\n                    id: child.id,\r\n                    xStart: Math.floor(child.getBoundingClientRect().x),\r\n                    xEnd: Math.floor(child.getBoundingClientRect().x + child.getBoundingClientRect().width),\r\n                    yStart: Math.floor(child.getBoundingClientRect().y),\r\n                    yEnd: Math.floor(child.getBoundingClientRect().y + child.getBoundingClientRect().height)\r\n                })\r\n                else lettersCoord = []\r\n            }\r\n            const touchSelector = (event) => {\r\n                const childs = element.children\r\n                let elementX = event.changedTouches[0].clientX\r\n                let elementY = event.changedTouches[0].clientY\r\n                event.preventDefault()\r\n                lettersCoord.forEach(el => {\r\n                    const { yStart, yEnd, xStart, xEnd, value, id } = el\r\n                    if (elementY > yStart &&\r\n                        elementY < yEnd &&\r\n                        elementX > xStart &&\r\n                        elementX < xEnd)\r\n                        this.setLettersData(value, id)\r\n                })\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    getElemCoordTouch(child)\r\n                }\r\n            }\r\n            const addSelector = (event) => {\r\n                const childs = element.children\r\n                const text = event.target.innerText\r\n                if (text.length === 1) this.setLettersDataByMouse(event)\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    child.addEventListener('mouseover', inputRender)\r\n                }\r\n            }\r\n            const removeSelector = () => {\r\n                this.wordChecker(this.state.input)\r\n                this.props.nextLevelChecker()\r\n                this.setState({\r\n                    input: [],\r\n                    selectedLetter: [],\r\n                    touchedLine: []\r\n                })\r\n                const childs = element.children\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    child.removeEventListener('mouseover', inputRender)\r\n                }\r\n            }\r\n            element.addEventListener('mousedown', addSelector)\r\n            document.addEventListener('mouseup', removeSelector)\r\n\r\n            element.addEventListener('touchmove', touchSelector)\r\n            element.addEventListener('touchstart', touchSelector)\r\n            document.addEventListener('touchend', removeSelector)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { completed, onToggleModal, miscWords, letters } = this.props\r\n        const { input, selectedLetter } = this.state\r\n        const miscWordsCount = miscWords.filter(el => el.guessed).length\r\n        let lettersBlockClass = 'letters-block animate__animated'\r\n        completed ? lettersBlockClass += \" animate__rollOut animate__delay-1s\"\r\n            : lettersBlockClass += \" animate__rollIn\"\r\n        const lettersElement = letters.map((el, index) => {\r\n            const { letter, id } = el;\r\n            let isSelectedLetter = false;\r\n            selectedLetter.forEach(selectedId => {\r\n                if (id === selectedId) isSelectedLetter = true\r\n            });\r\n            const letterClass = isSelectedLetter ?\r\n                `letters__item letters__item--selected letters--index_${index}` :\r\n                `letters__item letters--index_${index}`\r\n            return <span\r\n                id={id}\r\n                key={id}\r\n                className={letterClass}>\r\n                {letter}\r\n            </span>\r\n        })\r\n        const inputLabel = input.map(e => e.letter)\r\n        let btnClass = `misc-words-btn animate__animated animate__rubberBand`\r\n        if (miscWordsCount % 2 !== 0)\r\n            btnClass = 'misc-words-btn animate__animated animate__shakeY'\r\n        return <div className={lettersBlockClass}>\r\n            <div className=\"letters-input\">{inputLabel}</div>\r\n            {miscWordsCount > 0 && <div className={btnClass} onClick={onToggleModal}>\r\n                {miscWordsCount}\r\n            </div>}\r\n            <div className=\"letters\" id=\"letters-block\">\r\n                {lettersElement}\r\n            </div >\r\n        </div>\r\n    }\r\n}","import React from 'react'\r\nimport './MiscWords.scss'\r\n\r\nexport default class MiscWords extends React.Component {\r\n    render() {\r\n        const { onToggleModal, isModalActive, miscWords = [] } = this.props\r\n        const modalClass = isModalActive ? \"misc-words-modal animate__animated animate__zoomIn\" :\r\n            'misc-words-modal misc-words-modal--disabled animate__animated animate__flipOutY'\r\n        const miscWordsArr = miscWords.filter(el => el.guessed)\r\n            .map(el =>\r\n                <div\r\n                    className=\"misc-words-modal__word\"\r\n                    key={el.word}>\r\n                    {el.word}\r\n                </div>)\r\n        return <div className={modalClass}>\r\n            <span className=\"misc-words-modal__close\"\r\n                onClick={onToggleModal}>\r\n                X\r\n            </span>\r\n            <h2 className=\"misc-words-modal__title\">Cлова, які правильні, але не підійшли до цього рівня</h2>\r\n            {miscWordsArr}\r\n        </div>\r\n\r\n    }\r\n}","import React from 'react'\r\nimport './LevelPassedAlert.scss'\r\n\r\nconst LevelPassedAlert = ({ level, nextLevelData, levelsAmmount }) => {\r\n    let nextLevelNumber;\r\n    if (nextLevelData.length > 0)\r\n        nextLevelNumber = `next level - ${level + 1}`\r\n    else nextLevelNumber = \"This is last level\"\r\n    return <div\r\n        className=\"level-passed-alert animate__animated animate__fadeInBottomLeft\">\r\n        <p>LEVEL {level}/{levelsAmmount} completed</p>\r\n        <p> {nextLevelNumber} </p>\r\n    </div>\r\n}\r\nexport default LevelPassedAlert","import React from 'react'\r\nimport './GamePassedScreen.scss'\r\nimport { Fireworks } from 'fireworks/lib/react'\r\n\r\nconst GamePassedScreen = ({ onRestartGame }) => {\r\n    let fxProps = {\r\n        count: 3,\r\n        interval: 1000,\r\n        colors: ['#B80C09', '#040F16', '#FBFBFF'],\r\n        calc: (props, i) => ({\r\n            ...props,\r\n            x: window.innerWidth / 2,\r\n            y: 200 + Math.random() * 350 - 50 + (i === 2 ? -80 : 0)\r\n        })\r\n    }\r\n    const restartGame = () => {\r\n        setTimeout(onRestartGame, 500)\r\n    }\r\n    return <>\r\n        <Fireworks {...fxProps} />\r\n        <div className=\"final-screen\">\r\n            <p>You have PASSED MY GAME</p>\r\n            <button\r\n                className=\"final-screen__button\"\r\n                onClick={restartGame}> Replay? :) </button>\r\n        </div>\r\n    </>\r\n}\r\nexport default GamePassedScreen\r\n\r\n\r\n\r\n","const data = [\r\n    {\r\n        completed: false,\r\n        level: 1,\r\n        templateNumber: 1,\r\n        words: [\r\n            { word: 'Тарас', guessed: false, stretch: false, },\r\n            { word: 'Траса', guessed: false, stretch: false, },\r\n            { word: 'Тара', guessed: false, stretch: true, },\r\n            { word: 'Сара', guessed: false, stretch: true, },\r\n            { word: 'Раса', guessed: false, stretch: true, },\r\n            { word: 'Раста', guessed: false, stretch: true, }\r\n        ],\r\n        letters: [\r\n            { letter: 'А', id: 1 },\r\n            { letter: 'Р', id: 2 },\r\n            { letter: 'С', id: 3 },\r\n            { letter: 'А', id: 4 },\r\n            { letter: 'Т', id: 5 },\r\n        ],\r\n        miscWords: [{ word: \"раст\", guessed: false }]\r\n    },\r\n    {\r\n        completed: false,\r\n        level: 2,\r\n        templateNumber: 2,\r\n        words: [\r\n            { word: 'декор', guessed: false, stretch: false, },\r\n            { word: 'кредо', guessed: false, stretch: true, },\r\n            { word: 'кедр', guessed: false, stretch: false, },\r\n            { word: 'деко', guessed: false, stretch: true, },\r\n            { word: 'код', guessed: false, stretch: false, },\r\n            { word: 'рок', guessed: false, stretch: true, }\r\n        ],\r\n        letters: [\r\n            { letter: 'К', id: 1 },\r\n            { letter: 'Р', id: 2 },\r\n            { letter: 'О', id: 3 },\r\n            { letter: 'Д', id: 4 },\r\n            { letter: 'Е', id: 5 },\r\n        ],\r\n        miscWords: [\r\n            { word: 'док', guessed: false },\r\n            { word: 'орк', guessed: false },\r\n            { word: 'докер', guessed: false },\r\n            { word: 'кодер', guessed: false },\r\n            { word: 'корд', guessed: false },\r\n        ]\r\n    },\r\n    {\r\n        completed: false,\r\n        level: 3,\r\n        templateNumber: 3,\r\n        words: [\r\n            { word: 'блок', guessed: false, stretch: false, },\r\n            { word: 'бокал', guessed: false, stretch: false, },\r\n            { word: 'кола', guessed: false, stretch: false, },\r\n            { word: 'лак', guessed: false, stretch: true, },\r\n            { word: 'бак', guessed: false, stretch: true, },\r\n            { word: 'колба', guessed: false, stretch: true, }\r\n        ],\r\n        letters: [\r\n            { letter: 'К', id: 1 },\r\n            { letter: 'О', id: 2 },\r\n            { letter: 'А', id: 3 },\r\n            { letter: 'Б', id: 4 },\r\n            { letter: 'Л', id: 5 },\r\n        ],\r\n        miscWords: [\r\n            { word: 'бал', guessed: false },\r\n            { word: 'лоб', guessed: false },\r\n            { word: 'бока', guessed: false },\r\n            { word: 'або', guessed: false },\r\n            { word: 'кал', guessed: false },\r\n            { word: 'бола', guessed: false },\r\n        ]\r\n    },\r\n    {\r\n        completed: false,\r\n        level: 4,\r\n        templateNumber: 4,\r\n        words: [\r\n            { word: 'порт', guessed: false, stretch: false, },\r\n            { word: 'тропа', guessed: false, stretch: false, },\r\n            { word: 'ато', guessed: false, stretch: true, },\r\n            { word: 'таро', guessed: false, stretch: false, },\r\n            { word: 'рот', guessed: false, stretch: true, },\r\n            { word: 'апорт', guessed: false, stretch: true, }\r\n        ],\r\n        letters: [\r\n            { letter: 'Р', id: 1 },\r\n            { letter: 'О', id: 2 },\r\n            { letter: 'Т', id: 3 },\r\n            { letter: 'А', id: 4 },\r\n            { letter: 'П', id: 5 },\r\n        ],\r\n        miscWords: [\r\n            { word: 'трап', guessed: false },\r\n            { word: 'пар', guessed: false },\r\n            { word: 'рота', guessed: false },\r\n            { word: 'про', guessed: false },\r\n            { word: 'пора', guessed: false },\r\n            { word: 'пат', guessed: false },\r\n            { word: 'тор', guessed: false },\r\n            { word: 'троп', guessed: false },\r\n        ]\r\n    },\r\n    {\r\n        completed: false,\r\n        level: 5,\r\n        templateNumber: 1,\r\n        words: [\r\n            { word: 'комар', guessed: true, stretch: false, },\r\n            { word: 'корма', guessed: true, stretch: false, },\r\n            { word: 'кора', guessed: true, stretch: true, },\r\n            { word: 'омар', guessed: true, stretch: true, },\r\n            { word: 'мак', guessed: true, stretch: true, },\r\n            { word: 'ром', guessed: true, stretch: true, }\r\n        ],\r\n        letters: [\r\n            { letter: 'А', id: 1 },\r\n            { letter: 'Р', id: 2 },\r\n            { letter: 'С', id: 3 },\r\n            { letter: 'А', id: 4 },\r\n            { letter: 'Т', id: 5 },\r\n        ],\r\n        miscWords: [{ word: \"раст\", guessed: false }]\r\n    }\r\n]\r\nexport default data","import React from 'react'\r\nimport './App.scss'\r\nimport Template from '../Template/Template'\r\nimport Letters from '../Letters/Letters'\r\nimport MiscWords from '../MiscWords/MiscWords'\r\nimport LevelPassedAlert from '../LevelPassedAlert/LevelPassedAlert'\r\nimport GamePassedScreen from '../GamePassedScreen/GamePassedScreen'\r\nimport data from '../../data/data'\r\n\r\nexport default class App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            modalActive: false,\r\n            currentLevel: 4,\r\n            dataBase: data,\r\n        }\r\n        this.onRestartGame = () => {\r\n            this.setState({ currentLevel: 1 })\r\n        }\r\n        this.toggleModal = () => {\r\n            this.setState(({ modalActive }) => {\r\n                const newState = !modalActive\r\n                return { modalActive: newState }\r\n            })\r\n        }\r\n        this.setCompletedLevel = (completedLevelObj) => {\r\n            this.setState(({ dataBase }) => {\r\n                completedLevelObj.completed = true;\r\n                const newData = dataBase.map((el) => {\r\n                    if (this.state.currentLevel === el.level)\r\n                        return el = completedLevelObj\r\n                    else return el\r\n                })\r\n                return { dataBase: newData }\r\n            })\r\n        }\r\n        this.nextLevelChecker = () => {\r\n            const { dataBase, currentLevel } = this.state\r\n            const currentLevelData = this.levelChecker(dataBase, currentLevel)\r\n            if (currentLevelData.length > 0) {\r\n                const { words } = currentLevelData[0]\r\n                const wordsLeft = words.filter((element) => element.guessed === false)\r\n                const levelCompleted = wordsLeft.length === 0 ? true : false\r\n                const levelIsLoading = currentLevelData[0].completed\r\n                // next lvl trigger\r\n                if (!levelIsLoading && levelCompleted) setTimeout(this.nextLevel, 2200)\r\n                if (levelCompleted) this.setCompletedLevel(currentLevelData[0])\r\n            }\r\n        }\r\n        this.wordChecker = (enterWord) => {\r\n            const { dataBase, currentLevel } = this.state\r\n            const word = enterWord.map((el) => el.letter).join(\"\")\r\n            const newData = dataBase.map((element) => {\r\n                if (currentLevel === element.level) {\r\n                    element.words.map((elWord) => {\r\n                        const rightWord = elWord.word.toUpperCase()\r\n                        if (rightWord === word) elWord.guessed = true\r\n                    })\r\n                    element.miscWords.map((elWord) => {\r\n                        const miscWord = elWord.word.toUpperCase()\r\n                        if (miscWord === word) elWord.guessed = true\r\n                    })\r\n                }\r\n                return element\r\n            })\r\n            this.setState({ dataBase: newData })\r\n        }\r\n        this.levelChecker = (dataBase, currentLevel) => {\r\n            return dataBase.filter(el => {\r\n                const { level } = el\r\n                if (level === currentLevel) return el\r\n            })\r\n        }\r\n        this.nextLevel = () => {\r\n            this.setState(({ currentLevel }) => {\r\n                let _level = currentLevel\r\n                let nextLevel = _level + 1\r\n                return { currentLevel: nextLevel }\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const { dataBase, currentLevel, modalActive } = this.state\r\n        const levelData = this.levelChecker(dataBase, currentLevel)\r\n        if (levelData.length > 0) {\r\n\r\n            const { completed, miscWords, letters, level } = levelData[0]\r\n            const { ...WordsTemplate } = levelData[0]\r\n            const levelsAmmount = dataBase.length\r\n            const nextLevelData = this.levelChecker(dataBase, currentLevel + 1)\r\n            return <div className=\"wrapper\">\r\n\r\n                <Template\r\n                    completed={completed}\r\n                    data={WordsTemplate} />\r\n\r\n                <Letters\r\n                    miscWords={miscWords}\r\n                    onToggleModal={this.toggleModal}\r\n                    completed={completed}\r\n                    letters={letters}\r\n                    wordChecker={this.wordChecker}\r\n                    nextLevelChecker={this.nextLevelChecker} />\r\n\r\n                <MiscWords\r\n                    miscWords={miscWords}\r\n                    onToggleModal={this.toggleModal}\r\n                    isModalActive={modalActive} />\r\n\r\n                {completed && <LevelPassedAlert\r\n                    level={level}\r\n                    nextLevelData={nextLevelData}\r\n                    levelsAmmount={levelsAmmount} />}\r\n\r\n            </div>\r\n        }\r\n        else return <div className=\"wrapper\">\r\n            <GamePassedScreen\r\n                onRestartGame={this.onRestartGame} />\r\n        </div>\r\n    }\r\n}\r\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <StrictMode>  <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}