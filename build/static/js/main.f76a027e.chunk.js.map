{"version":3,"sources":["components/Template/Template.js","components/Letters/Letters.js","components/App/App.js","index.js"],"names":["keys","Template","props","renderTemplateById","type","wordsArr","map","word","index","key","templateNumber","wordIndex","guessed","this","words","data","template","className","React","Component","Word","arr","wordClass","stretch","style","zIndex","templateNum","templateChange","res","e","toUpperCase","Letters","state","input","setInput","event","canRender","forEach","element","id","target","setState","lettersData","push","letter","innerText","removeInput","window","onload","document","getElementById","inputRender","addSelector","childs","children","text","length","console","log","child","i","addEventListener","removeSelector","removeEventListener","letters","el","inputLabel","App","dataBase","level","currentLevel","levelData","WordsTemplate","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f76a027e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Template.scss'\r\n\r\nlet keys = 0;\r\nlet zIndex = 0;\r\nexport default class Template extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.renderTemplateById = (type, wordsArr) => {\r\n            // template #1\r\n            return wordsArr.map((word, index) => {\r\n                return <Word\r\n                    word={word.word}\r\n                    key={word.word}\r\n                    templateNumber={type}\r\n                    wordIndex={index}\r\n                    guessed={word.guessed}\r\n                />\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const { data: { words }, data: { templateNumber } } = this.props\r\n        const template = this.renderTemplateById(templateNumber, words)\r\n        return <div className=\"template\">\r\n            {template}\r\n        </div>\r\n    }\r\n}\r\n\r\nconst Word = ({ word, templateNumber, wordIndex, guessed }) => {\r\n    const arr = [...word]\r\n    let wordClass = \"template__word\"\r\n    if (guessed) wordClass += \" template__word--visible\"\r\n    let stretch = false\r\n\r\n    function templateChange(templateNum) {\r\n        // template #1\r\n        if (templateNum === 1) {\r\n            switch (wordIndex) {\r\n                case 2: stretch = true; break;\r\n                case 4: stretch = true; break;\r\n                case 5: stretch = true; break;\r\n                case 3: stretch = true; break;\r\n            }\r\n            wordClass += \" template_1\"\r\n        }\r\n        // \r\n        if (stretch) wordClass += \" template__word--stretch\"\r\n        switch (wordIndex) {\r\n            case 0: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 1: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 2: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 3: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 4: stretch = wordClass += ` index_${wordIndex}`; break;\r\n            case 5: stretch = wordClass += ` index_${wordIndex}`; break;\r\n        }\r\n    }\r\n    // zet index\r\n    const style = {\r\n        zIndex: zIndex,\r\n    }\r\n    templateChange(templateNumber)\r\n    const res = arr.map((e) => {\r\n        return <div className=\"template__letter\" key={keys++}>{e.toUpperCase()}</div>\r\n    })\r\n    return <div className={wordClass} style={style} >\r\n        {res}\r\n    </div>\r\n}","import React from 'react'\r\nimport './Letters.scss'\r\n\r\nexport default class Letters extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            input: [],\r\n        }\r\n        this.setInput = (event) => {\r\n            let canRender = true;\r\n            this.state.input.forEach(element => {\r\n                if (element.id === event.target.id)\r\n                    canRender = false\r\n            });\r\n            if (canRender) this.setState(({ input }) => {\r\n                let lettersData = input.map(e => e)\r\n                lettersData.push(\r\n                    {\r\n                        letter: event.target.innerText,\r\n                        id: event.target.id\r\n                    }\r\n                )\r\n                return { input: lettersData }\r\n            })\r\n        }\r\n        this.removeInput = () => {\r\n            this.setState({ input: [] })\r\n        }\r\n        window.onload = () => {\r\n            const element = document.getElementById('letters-block')\r\n            const inputRender = (event) => {\r\n                this.setInput(event)\r\n            }\r\n            const addSelector = (event) => {\r\n                const childs = element.children\r\n                const text = event.target.innerText\r\n                if (text.length === 1) this.setInput(event)\r\n                if (text.length === 1) console.log(text)\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    child.addEventListener('mouseover', inputRender)\r\n                    child.addEventListener('touchmove', inputRender)\r\n                }\r\n            }\r\n            const removeSelector = () => {\r\n                this.removeInput()\r\n                const childs = element.children\r\n                for (let i = 0, child; child = childs[i]; i++) {\r\n                    child.removeEventListener('mouseover', inputRender)\r\n                    child.removeEventListener('touchmove', inputRender)\r\n                }\r\n            }\r\n            element.addEventListener('mousedown', addSelector)\r\n            document.addEventListener('mouseup', removeSelector)\r\n            element.addEventListener('touchstart', addSelector)\r\n            document.addEventListener('touchend', removeSelector)\r\n        }\r\n    }\r\n    render() {\r\n        const { input } = this.state\r\n\r\n        const letters = this.props.letters.map((el, index) => {\r\n            const { letter, id } = el;\r\n            return <span\r\n                id={id}\r\n                key={id}\r\n                className={`letters__item letters--index_${index}`}>\r\n                {letter}\r\n            </span>\r\n        })\r\n        const inputLabel = input.map(e => e.letter)\r\n        return <div className=\"letters-block\">\r\n            <div className=\"letters-input\">{inputLabel}</div>\r\n            <div className=\"letters\" id=\"letters-block\">\r\n                {letters}\r\n            </div >\r\n        </div>\r\n    }\r\n}","import React from 'react'\r\nimport './App.scss'\r\nimport Template from '../Template/Template'\r\nimport Letters from '../Letters/Letters'\r\n\r\nexport default class App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            dataBase: [\r\n                {\r\n                    level: 1,\r\n                    templateNumber: 1,\r\n                    words: [\r\n                        { word: 'Тарас', guessed: true, },\r\n                        { word: 'Траса', guessed: true },\r\n                        { word: 'Тара', guessed: true },\r\n                        { word: 'Сара', guessed: true },\r\n                        { word: 'Раса', guessed: true },\r\n                        { word: 'Раста', guessed: true }\r\n                    ],\r\n                    letters: [\r\n                        { letter: 'А', id: 1 },\r\n                        { letter: 'Р', id: 2 },\r\n                        { letter: 'С', id: 3 },\r\n                        { letter: 'А', id: 4 },\r\n                        { letter: 'Т', id: 5 },\r\n                    ]\r\n                }],\r\n            currentLevel: 1,\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { dataBase, currentLevel } = this.state\r\n        const levelData = dataBase.map(el => {\r\n            const { level, templateNumber, words, letters } = el\r\n            if (level === currentLevel) return { templateNumber, words, letters }\r\n            else return null\r\n        })\r\n        const { letters } = levelData[0]\r\n        const { ...WordsTemplate } = levelData[0]\r\n        return <div className=\"wrapper\">\r\n            <Template data={WordsTemplate} />\r\n            <Letters letters={letters} />\r\n        </div>\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}